
DAY_16_Asg3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f2c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080010bc  080010bc  000020bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080010f4  080010f4  00003054  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080010f4  080010f4  000020f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080010fc  080010fc  00003054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080010fc  080010fc  000020fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001100  08001100  00002100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  08001104  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003054  2**0
                  CONTENTS
 10 .bss          0000016c  20000054  20000054  00003054  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001c0  200001c0  00003054  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00003054  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001dd2  00000000  00000000  0000307e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000080b  00000000  00000000  00004e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000170  00000000  00000000  00005660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000f1  00000000  00000000  000057d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000194f4  00000000  00000000  000058c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002209  00000000  00000000  0001edb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c414  00000000  00000000  00020fbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ad3d2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000894  00000000  00000000  000ad418  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 00000025  00000000  00000000  000adcac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000049  00000000  00000000  000adcd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000054 	.word	0x20000054
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080010a4 	.word	0x080010a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000058 	.word	0x20000058
 80001cc:	080010a4 	.word	0x080010a4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	4603      	mov	r3, r0
 8000278:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800027a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800027e:	2b00      	cmp	r3, #0
 8000280:	db0b      	blt.n	800029a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000282:	79fb      	ldrb	r3, [r7, #7]
 8000284:	f003 021f 	and.w	r2, r3, #31
 8000288:	4906      	ldr	r1, [pc, #24]	@ (80002a4 <__NVIC_EnableIRQ+0x34>)
 800028a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800028e:	095b      	lsrs	r3, r3, #5
 8000290:	2001      	movs	r0, #1
 8000292:	fa00 f202 	lsl.w	r2, r0, r2
 8000296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800029a:	bf00      	nop
 800029c:	370c      	adds	r7, #12
 800029e:	46bd      	mov	sp, r7
 80002a0:	bc80      	pop	{r7}
 80002a2:	4770      	bx	lr
 80002a4:	e000e100 	.word	0xe000e100

080002a8 <extint_init>:
#include "led.h"

volatile uint32_t count=0;
void extint_init(void)

{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0
	//SWITCH
	RCC->AHB1ENR |= BV(SWITCH_CLK_EN);
 80002ac:	4b11      	ldr	r3, [pc, #68]	@ (80002f4 <extint_init+0x4c>)
 80002ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002b0:	4a10      	ldr	r2, [pc, #64]	@ (80002f4 <extint_init+0x4c>)
 80002b2:	f043 0301 	orr.w	r3, r3, #1
 80002b6:	6313      	str	r3, [r2, #48]	@ 0x30
	SWITCH_GPIO->MODER &= ~(BV(0)|BV(1));
 80002b8:	4b0f      	ldr	r3, [pc, #60]	@ (80002f8 <extint_init+0x50>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	4a0e      	ldr	r2, [pc, #56]	@ (80002f8 <extint_init+0x50>)
 80002be:	f023 0303 	bic.w	r3, r3, #3
 80002c2:	6013      	str	r3, [r2, #0]

	//EXTERNAL INTRRUPT
	SYSCFG->EXTICR[0] &= ~(BV(0) | BV(1) | BV(2) | BV(3));
 80002c4:	4b0d      	ldr	r3, [pc, #52]	@ (80002fc <extint_init+0x54>)
 80002c6:	689b      	ldr	r3, [r3, #8]
 80002c8:	4a0c      	ldr	r2, [pc, #48]	@ (80002fc <extint_init+0x54>)
 80002ca:	f023 030f 	bic.w	r3, r3, #15
 80002ce:	6093      	str	r3, [r2, #8]
		EXTI->IMR |= BV(0);
 80002d0:	4b0b      	ldr	r3, [pc, #44]	@ (8000300 <extint_init+0x58>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	4a0a      	ldr	r2, [pc, #40]	@ (8000300 <extint_init+0x58>)
 80002d6:	f043 0301 	orr.w	r3, r3, #1
 80002da:	6013      	str	r3, [r2, #0]
		EXTI->RTSR |= BV(0);
 80002dc:	4b08      	ldr	r3, [pc, #32]	@ (8000300 <extint_init+0x58>)
 80002de:	689b      	ldr	r3, [r3, #8]
 80002e0:	4a07      	ldr	r2, [pc, #28]	@ (8000300 <extint_init+0x58>)
 80002e2:	f043 0301 	orr.w	r3, r3, #1
 80002e6:	6093      	str	r3, [r2, #8]
		NVIC_EnableIRQ(EXTI0_IRQn);
 80002e8:	2006      	movs	r0, #6
 80002ea:	f7ff ffc1 	bl	8000270 <__NVIC_EnableIRQ>
	}
 80002ee:	bf00      	nop
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	40023800 	.word	0x40023800
 80002f8:	40020000 	.word	0x40020000
 80002fc:	40013800 	.word	0x40013800
 8000300:	40013c00 	.word	0x40013c00

08000304 <EXTI0_IRQHandler>:

	void EXTI0_IRQHandler(void)
	{
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0

		EXTI->PR |= BV(0);
 8000308:	4b07      	ldr	r3, [pc, #28]	@ (8000328 <EXTI0_IRQHandler+0x24>)
 800030a:	695b      	ldr	r3, [r3, #20]
 800030c:	4a06      	ldr	r2, [pc, #24]	@ (8000328 <EXTI0_IRQHandler+0x24>)
 800030e:	f043 0301 	orr.w	r3, r3, #1
 8000312:	6153      	str	r3, [r2, #20]
		LED_ON(14);
 8000314:	200e      	movs	r0, #14
 8000316:	f000 f80b 	bl	8000330 <LED_ON>
		count+=1;
 800031a:	4b04      	ldr	r3, [pc, #16]	@ (800032c <EXTI0_IRQHandler+0x28>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	3301      	adds	r3, #1
 8000320:	4a02      	ldr	r2, [pc, #8]	@ (800032c <EXTI0_IRQHandler+0x28>)
 8000322:	6013      	str	r3, [r2, #0]

	}
 8000324:	bf00      	nop
 8000326:	bd80      	pop	{r7, pc}
 8000328:	40013c00 	.word	0x40013c00
 800032c:	20000070 	.word	0x20000070

08000330 <LED_ON>:
	LED_GPIO->OSPEEDR &= ~(BV(2*pin)|BV(2*pin+1));
	LED_GPIO->PUPDR &= ~(BV(2*pin)|BV(2*pin+1));
}

void LED_ON(uint8_t pin)
{
 8000330:	b480      	push	{r7}
 8000332:	b083      	sub	sp, #12
 8000334:	af00      	add	r7, sp, #0
 8000336:	4603      	mov	r3, r0
 8000338:	71fb      	strb	r3, [r7, #7]
	LED_GPIO->ODR |= BV(pin);
 800033a:	4b07      	ldr	r3, [pc, #28]	@ (8000358 <LED_ON+0x28>)
 800033c:	695b      	ldr	r3, [r3, #20]
 800033e:	79fa      	ldrb	r2, [r7, #7]
 8000340:	2101      	movs	r1, #1
 8000342:	fa01 f202 	lsl.w	r2, r1, r2
 8000346:	4611      	mov	r1, r2
 8000348:	4a03      	ldr	r2, [pc, #12]	@ (8000358 <LED_ON+0x28>)
 800034a:	430b      	orrs	r3, r1
 800034c:	6153      	str	r3, [r2, #20]
}
 800034e:	bf00      	nop
 8000350:	370c      	adds	r7, #12
 8000352:	46bd      	mov	sp, r7
 8000354:	bc80      	pop	{r7}
 8000356:	4770      	bx	lr
 8000358:	40020c00 	.word	0x40020c00

0800035c <DelayMs>:

void SwDelayMs(uint32_t ms);

uint32_t DWT_Init(void);

static inline void DelayMs(volatile uint32_t ms) {
 800035c:	b480      	push	{r7}
 800035e:	b085      	sub	sp, #20
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 8000364:	4b0e      	ldr	r3, [pc, #56]	@ (80003a0 <DelayMs+0x44>)
 8000366:	685b      	ldr	r3, [r3, #4]
 8000368:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 800036a:	4b0e      	ldr	r3, [pc, #56]	@ (80003a4 <DelayMs+0x48>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	4a0e      	ldr	r2, [pc, #56]	@ (80003a8 <DelayMs+0x4c>)
 8000370:	fba2 2303 	umull	r2, r3, r2, r3
 8000374:	099b      	lsrs	r3, r3, #6
 8000376:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	68ba      	ldr	r2, [r7, #8]
 800037c:	fb02 f303 	mul.w	r3, r2, r3
 8000380:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 8000382:	bf00      	nop
 8000384:	4b06      	ldr	r3, [pc, #24]	@ (80003a0 <DelayMs+0x44>)
 8000386:	685a      	ldr	r2, [r3, #4]
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	1ad2      	subs	r2, r2, r3
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	429a      	cmp	r2, r3
 8000390:	d3f8      	bcc.n	8000384 <DelayMs+0x28>
}
 8000392:	bf00      	nop
 8000394:	bf00      	nop
 8000396:	3714      	adds	r7, #20
 8000398:	46bd      	mov	sp, r7
 800039a:	bc80      	pop	{r7}
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop
 80003a0:	e0001000 	.word	0xe0001000
 80003a4:	20000000 	.word	0x20000000
 80003a8:	10624dd3 	.word	0x10624dd3

080003ac <main>:
#endif

extern uint32_t count;

int main(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b086      	sub	sp, #24
 80003b0:	af00      	add	r7, sp, #0
	char str[10];
	int duty;
	int cc=1;
 80003b2:	2301      	movs	r3, #1
 80003b4:	613b      	str	r3, [r7, #16]
	UartInit(9600);
 80003b6:	f44f 5016 	mov.w	r0, #9600	@ 0x2580
 80003ba:	f000 f92b 	bl	8000614 <UartInit>
	TimerPwmInit();
 80003be:	f000 f8b9 	bl	8000534 <TimerPwmInit>
	extint_init();
 80003c2:	f7ff ff71 	bl	80002a8 <extint_init>
	while(1)
	{
		if(count>=1)
 80003c6:	4b22      	ldr	r3, [pc, #136]	@ (8000450 <main+0xa4>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d022      	beq.n	8000414 <main+0x68>
		{
			count=0;
 80003ce:	4b20      	ldr	r3, [pc, #128]	@ (8000450 <main+0xa4>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	601a      	str	r2, [r3, #0]
			if(cc>100)
 80003d4:	693b      	ldr	r3, [r7, #16]
 80003d6:	2b64      	cmp	r3, #100	@ 0x64
 80003d8:	dd01      	ble.n	80003de <main+0x32>
				cc=1;
 80003da:	2301      	movs	r3, #1
 80003dc:	613b      	str	r3, [r7, #16]

			for(duty=0; duty<100;duty+=cc)
 80003de:	2300      	movs	r3, #0
 80003e0:	617b      	str	r3, [r7, #20]
 80003e2:	e013      	b.n	800040c <main+0x60>
			{
				TIM8->CCR1 = duty;
 80003e4:	4a1b      	ldr	r2, [pc, #108]	@ (8000454 <main+0xa8>)
 80003e6:	697b      	ldr	r3, [r7, #20]
 80003e8:	6353      	str	r3, [r2, #52]	@ 0x34
				sprintf(str,"%d\r\n",duty);
 80003ea:	1d3b      	adds	r3, r7, #4
 80003ec:	697a      	ldr	r2, [r7, #20]
 80003ee:	491a      	ldr	r1, [pc, #104]	@ (8000458 <main+0xac>)
 80003f0:	4618      	mov	r0, r3
 80003f2:	f000 f9bf 	bl	8000774 <siprintf>
				UartPuts(str);
 80003f6:	1d3b      	adds	r3, r7, #4
 80003f8:	4618      	mov	r0, r3
 80003fa:	f000 f975 	bl	80006e8 <UartPuts>
				DelayMs(40);
 80003fe:	2028      	movs	r0, #40	@ 0x28
 8000400:	f7ff ffac 	bl	800035c <DelayMs>
			for(duty=0; duty<100;duty+=cc)
 8000404:	697a      	ldr	r2, [r7, #20]
 8000406:	693b      	ldr	r3, [r7, #16]
 8000408:	4413      	add	r3, r2
 800040a:	617b      	str	r3, [r7, #20]
 800040c:	697b      	ldr	r3, [r7, #20]
 800040e:	2b63      	cmp	r3, #99	@ 0x63
 8000410:	dde8      	ble.n	80003e4 <main+0x38>
 8000412:	e7d8      	b.n	80003c6 <main+0x1a>
			}
		}

		else
		{
			cc+=10;
 8000414:	693b      	ldr	r3, [r7, #16]
 8000416:	330a      	adds	r3, #10
 8000418:	613b      	str	r3, [r7, #16]

			for(duty=99;duty>=0;duty-=cc)
 800041a:	2363      	movs	r3, #99	@ 0x63
 800041c:	617b      	str	r3, [r7, #20]
 800041e:	e013      	b.n	8000448 <main+0x9c>
			{
				TIM8->CCR1 = duty;
 8000420:	4a0c      	ldr	r2, [pc, #48]	@ (8000454 <main+0xa8>)
 8000422:	697b      	ldr	r3, [r7, #20]
 8000424:	6353      	str	r3, [r2, #52]	@ 0x34
				sprintf(str,"%d\r\n",duty);
 8000426:	1d3b      	adds	r3, r7, #4
 8000428:	697a      	ldr	r2, [r7, #20]
 800042a:	490b      	ldr	r1, [pc, #44]	@ (8000458 <main+0xac>)
 800042c:	4618      	mov	r0, r3
 800042e:	f000 f9a1 	bl	8000774 <siprintf>
				UartPuts(str);
 8000432:	1d3b      	adds	r3, r7, #4
 8000434:	4618      	mov	r0, r3
 8000436:	f000 f957 	bl	80006e8 <UartPuts>
				DelayMs(40);
 800043a:	2028      	movs	r0, #40	@ 0x28
 800043c:	f7ff ff8e 	bl	800035c <DelayMs>
			for(duty=99;duty>=0;duty-=cc)
 8000440:	697a      	ldr	r2, [r7, #20]
 8000442:	693b      	ldr	r3, [r7, #16]
 8000444:	1ad3      	subs	r3, r2, r3
 8000446:	617b      	str	r3, [r7, #20]
 8000448:	697b      	ldr	r3, [r7, #20]
 800044a:	2b00      	cmp	r3, #0
 800044c:	dae8      	bge.n	8000420 <main+0x74>
		if(count>=1)
 800044e:	e7ba      	b.n	80003c6 <main+0x1a>
 8000450:	20000070 	.word	0x20000070
 8000454:	40010400 	.word	0x40010400
 8000458:	080010bc 	.word	0x080010bc

0800045c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b086      	sub	sp, #24
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000464:	4a14      	ldr	r2, [pc, #80]	@ (80004b8 <_sbrk+0x5c>)
 8000466:	4b15      	ldr	r3, [pc, #84]	@ (80004bc <_sbrk+0x60>)
 8000468:	1ad3      	subs	r3, r2, r3
 800046a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800046c:	697b      	ldr	r3, [r7, #20]
 800046e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000470:	4b13      	ldr	r3, [pc, #76]	@ (80004c0 <_sbrk+0x64>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	2b00      	cmp	r3, #0
 8000476:	d102      	bne.n	800047e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000478:	4b11      	ldr	r3, [pc, #68]	@ (80004c0 <_sbrk+0x64>)
 800047a:	4a12      	ldr	r2, [pc, #72]	@ (80004c4 <_sbrk+0x68>)
 800047c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800047e:	4b10      	ldr	r3, [pc, #64]	@ (80004c0 <_sbrk+0x64>)
 8000480:	681a      	ldr	r2, [r3, #0]
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	4413      	add	r3, r2
 8000486:	693a      	ldr	r2, [r7, #16]
 8000488:	429a      	cmp	r2, r3
 800048a:	d207      	bcs.n	800049c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800048c:	f000 f994 	bl	80007b8 <__errno>
 8000490:	4603      	mov	r3, r0
 8000492:	220c      	movs	r2, #12
 8000494:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000496:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800049a:	e009      	b.n	80004b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800049c:	4b08      	ldr	r3, [pc, #32]	@ (80004c0 <_sbrk+0x64>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004a2:	4b07      	ldr	r3, [pc, #28]	@ (80004c0 <_sbrk+0x64>)
 80004a4:	681a      	ldr	r2, [r3, #0]
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	4413      	add	r3, r2
 80004aa:	4a05      	ldr	r2, [pc, #20]	@ (80004c0 <_sbrk+0x64>)
 80004ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004ae:	68fb      	ldr	r3, [r7, #12]
}
 80004b0:	4618      	mov	r0, r3
 80004b2:	3718      	adds	r7, #24
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	20020000 	.word	0x20020000
 80004bc:	00000400 	.word	0x00000400
 80004c0:	20000074 	.word	0x20000074
 80004c4:	200001c0 	.word	0x200001c0

080004c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */

  DWT_Init();
 80004cc:	f000 f802 	bl	80004d4 <DWT_Init>
}
 80004d0:	bf00      	nop
 80004d2:	bd80      	pop	{r7, pc}

080004d4 <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80004d8:	4b14      	ldr	r3, [pc, #80]	@ (800052c <DWT_Init+0x58>)
 80004da:	68db      	ldr	r3, [r3, #12]
 80004dc:	4a13      	ldr	r2, [pc, #76]	@ (800052c <DWT_Init+0x58>)
 80004de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80004e2:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80004e4:	4b11      	ldr	r3, [pc, #68]	@ (800052c <DWT_Init+0x58>)
 80004e6:	68db      	ldr	r3, [r3, #12]
 80004e8:	4a10      	ldr	r2, [pc, #64]	@ (800052c <DWT_Init+0x58>)
 80004ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80004ee:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80004f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000530 <DWT_Init+0x5c>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a0e      	ldr	r2, [pc, #56]	@ (8000530 <DWT_Init+0x5c>)
 80004f6:	f023 0301 	bic.w	r3, r3, #1
 80004fa:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80004fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000530 <DWT_Init+0x5c>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a0b      	ldr	r2, [pc, #44]	@ (8000530 <DWT_Init+0x5c>)
 8000502:	f043 0301 	orr.w	r3, r3, #1
 8000506:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8000508:	4b09      	ldr	r3, [pc, #36]	@ (8000530 <DWT_Init+0x5c>)
 800050a:	2200      	movs	r2, #0
 800050c:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 800050e:	bf00      	nop
    __ASM volatile ("NOP");
 8000510:	bf00      	nop
    __ASM volatile ("NOP");
 8000512:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 8000514:	4b06      	ldr	r3, [pc, #24]	@ (8000530 <DWT_Init+0x5c>)
 8000516:	685b      	ldr	r3, [r3, #4]
 8000518:	2b00      	cmp	r3, #0
 800051a:	bf0c      	ite	eq
 800051c:	2301      	moveq	r3, #1
 800051e:	2300      	movne	r3, #0
 8000520:	b2db      	uxtb	r3, r3
}
 8000522:	4618      	mov	r0, r3
 8000524:	46bd      	mov	sp, r7
 8000526:	bc80      	pop	{r7}
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	e000edf0 	.word	0xe000edf0
 8000530:	e0001000 	.word	0xe0001000

08000534 <TimerPwmInit>:
 */

#include "Timer.h"

void TimerPwmInit(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
	//GPIOC c6
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8000538:	4b33      	ldr	r3, [pc, #204]	@ (8000608 <TimerPwmInit+0xd4>)
 800053a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800053c:	4a32      	ldr	r2, [pc, #200]	@ (8000608 <TimerPwmInit+0xd4>)
 800053e:	f043 0304 	orr.w	r3, r3, #4
 8000542:	6313      	str	r3, [r2, #48]	@ 0x30

	GPIOC->MODER |= BV(13);
 8000544:	4b31      	ldr	r3, [pc, #196]	@ (800060c <TimerPwmInit+0xd8>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a30      	ldr	r2, [pc, #192]	@ (800060c <TimerPwmInit+0xd8>)
 800054a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800054e:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &= ~BV(12);
 8000550:	4b2e      	ldr	r3, [pc, #184]	@ (800060c <TimerPwmInit+0xd8>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a2d      	ldr	r2, [pc, #180]	@ (800060c <TimerPwmInit+0xd8>)
 8000556:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800055a:	6013      	str	r3, [r2, #0]

	GPIOC->PUPDR &= ~(BV(12)|BV(13));
 800055c:	4b2b      	ldr	r3, [pc, #172]	@ (800060c <TimerPwmInit+0xd8>)
 800055e:	68db      	ldr	r3, [r3, #12]
 8000560:	4a2a      	ldr	r2, [pc, #168]	@ (800060c <TimerPwmInit+0xd8>)
 8000562:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000566:	60d3      	str	r3, [r2, #12]

	GPIOC->AFR[0] |= (3<<(6*4));
 8000568:	4b28      	ldr	r3, [pc, #160]	@ (800060c <TimerPwmInit+0xd8>)
 800056a:	6a1b      	ldr	r3, [r3, #32]
 800056c:	4a27      	ldr	r2, [pc, #156]	@ (800060c <TimerPwmInit+0xd8>)
 800056e:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
 8000572:	6213      	str	r3, [r2, #32]


	//clk
	RCC->APB2ENR |= RCC_APB2ENR_TIM8EN;
 8000574:	4b24      	ldr	r3, [pc, #144]	@ (8000608 <TimerPwmInit+0xd4>)
 8000576:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000578:	4a23      	ldr	r2, [pc, #140]	@ (8000608 <TimerPwmInit+0xd4>)
 800057a:	f043 0302 	orr.w	r3, r3, #2
 800057e:	6453      	str	r3, [r2, #68]	@ 0x44
	TIM8->PSC=PR-1;
 8000580:	4b23      	ldr	r3, [pc, #140]	@ (8000610 <TimerPwmInit+0xdc>)
 8000582:	220f      	movs	r2, #15
 8000584:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM8->ARR = 100 -1;
 8000586:	4b22      	ldr	r3, [pc, #136]	@ (8000610 <TimerPwmInit+0xdc>)
 8000588:	2263      	movs	r2, #99	@ 0x63
 800058a:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM8->CCR1 = 0;
 800058c:	4b20      	ldr	r3, [pc, #128]	@ (8000610 <TimerPwmInit+0xdc>)
 800058e:	2200      	movs	r2, #0
 8000590:	635a      	str	r2, [r3, #52]	@ 0x34

	TIM8->CCMR1 &= ~(TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC1S_1);
 8000592:	4b1f      	ldr	r3, [pc, #124]	@ (8000610 <TimerPwmInit+0xdc>)
 8000594:	699b      	ldr	r3, [r3, #24]
 8000596:	4a1e      	ldr	r2, [pc, #120]	@ (8000610 <TimerPwmInit+0xdc>)
 8000598:	f023 0303 	bic.w	r3, r3, #3
 800059c:	6193      	str	r3, [r2, #24]
	TIM8->CCER &= ~TIM_CCER_CC1P;
 800059e:	4b1c      	ldr	r3, [pc, #112]	@ (8000610 <TimerPwmInit+0xdc>)
 80005a0:	6a1b      	ldr	r3, [r3, #32]
 80005a2:	4a1b      	ldr	r2, [pc, #108]	@ (8000610 <TimerPwmInit+0xdc>)
 80005a4:	f023 0302 	bic.w	r3, r3, #2
 80005a8:	6213      	str	r3, [r2, #32]

	TIM8->CCMR1 |= TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2;
 80005aa:	4b19      	ldr	r3, [pc, #100]	@ (8000610 <TimerPwmInit+0xdc>)
 80005ac:	699b      	ldr	r3, [r3, #24]
 80005ae:	4a18      	ldr	r2, [pc, #96]	@ (8000610 <TimerPwmInit+0xdc>)
 80005b0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80005b4:	6193      	str	r3, [r2, #24]
		TIM8->CCMR1 |= TIM_CCMR1_OC1PE;
 80005b6:	4b16      	ldr	r3, [pc, #88]	@ (8000610 <TimerPwmInit+0xdc>)
 80005b8:	699b      	ldr	r3, [r3, #24]
 80005ba:	4a15      	ldr	r2, [pc, #84]	@ (8000610 <TimerPwmInit+0xdc>)
 80005bc:	f043 0308 	orr.w	r3, r3, #8
 80005c0:	6193      	str	r3, [r2, #24]
		TIM8->CR1 |= TIM_CR1_ARPE;
 80005c2:	4b13      	ldr	r3, [pc, #76]	@ (8000610 <TimerPwmInit+0xdc>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4a12      	ldr	r2, [pc, #72]	@ (8000610 <TimerPwmInit+0xdc>)
 80005c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005cc:	6013      	str	r3, [r2, #0]
		TIM8->CR1 |= (TIM_CR1_CMS_0 | TIM_CR1_CMS_1);
 80005ce:	4b10      	ldr	r3, [pc, #64]	@ (8000610 <TimerPwmInit+0xdc>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	4a0f      	ldr	r2, [pc, #60]	@ (8000610 <TimerPwmInit+0xdc>)
 80005d4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80005d8:	6013      	str	r3, [r2, #0]
		TIM8->CCER |= TIM_CCER_CC1E;
 80005da:	4b0d      	ldr	r3, [pc, #52]	@ (8000610 <TimerPwmInit+0xdc>)
 80005dc:	6a1b      	ldr	r3, [r3, #32]
 80005de:	4a0c      	ldr	r2, [pc, #48]	@ (8000610 <TimerPwmInit+0xdc>)
 80005e0:	f043 0301 	orr.w	r3, r3, #1
 80005e4:	6213      	str	r3, [r2, #32]
		TIM8->BDTR |= TIM_BDTR_MOE;
 80005e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000610 <TimerPwmInit+0xdc>)
 80005e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005ea:	4a09      	ldr	r2, [pc, #36]	@ (8000610 <TimerPwmInit+0xdc>)
 80005ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80005f0:	6453      	str	r3, [r2, #68]	@ 0x44
		TIM8->CR1 |= TIM_CR1_CEN;
 80005f2:	4b07      	ldr	r3, [pc, #28]	@ (8000610 <TimerPwmInit+0xdc>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4a06      	ldr	r2, [pc, #24]	@ (8000610 <TimerPwmInit+0xdc>)
 80005f8:	f043 0301 	orr.w	r3, r3, #1
 80005fc:	6013      	str	r3, [r2, #0]




}
 80005fe:	bf00      	nop
 8000600:	46bd      	mov	sp, r7
 8000602:	bc80      	pop	{r7}
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	40023800 	.word	0x40023800
 800060c:	40020800 	.word	0x40020800
 8000610:	40010400 	.word	0x40010400

08000614 <UartInit>:
 *      Author: admin
 */

#include "uart.h"

void UartInit(uint32_t baud) {
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
	/* GPIO config */
	// enable gpio clock
	//RCC->AHB1ENR |= BV(RCC_AHB1ENR_GPIOAEN_Pos);
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 800061c:	4b24      	ldr	r3, [pc, #144]	@ (80006b0 <UartInit+0x9c>)
 800061e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000620:	4a23      	ldr	r2, [pc, #140]	@ (80006b0 <UartInit+0x9c>)
 8000622:	f043 0301 	orr.w	r3, r3, #1
 8000626:	6313      	str	r3, [r2, #48]	@ 0x30
	// set gpio - no pull up & no pull down
	GPIOA->PUPDR &= ~(BV(2*2+1) | BV(2*2) | BV(2*3+1) | BV(2*3));
 8000628:	4b22      	ldr	r3, [pc, #136]	@ (80006b4 <UartInit+0xa0>)
 800062a:	68db      	ldr	r3, [r3, #12]
 800062c:	4a21      	ldr	r2, [pc, #132]	@ (80006b4 <UartInit+0xa0>)
 800062e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000632:	60d3      	str	r3, [r2, #12]
	// set gpio (PA2, PA3) mode as alt fn = 10
	GPIOA->MODER |= BV(2*2+1) | BV(2*3+1);
 8000634:	4b1f      	ldr	r3, [pc, #124]	@ (80006b4 <UartInit+0xa0>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a1e      	ldr	r2, [pc, #120]	@ (80006b4 <UartInit+0xa0>)
 800063a:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 800063e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(BV(2*2) | BV(2*3));
 8000640:	4b1c      	ldr	r3, [pc, #112]	@ (80006b4 <UartInit+0xa0>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a1b      	ldr	r2, [pc, #108]	@ (80006b4 <UartInit+0xa0>)
 8000646:	f023 0350 	bic.w	r3, r3, #80	@ 0x50
 800064a:	6013      	str	r3, [r2, #0]
	// set gpio (PA2, PA3) pin alt fn as uart (AF7) -- AFRL = AFR[0], AFRH = AFR[1]
	GPIOA->AFR[0] = (7 << (2*4)) | (7 << (3*4));
 800064c:	4b19      	ldr	r3, [pc, #100]	@ (80006b4 <UartInit+0xa0>)
 800064e:	f44f 42ee 	mov.w	r2, #30464	@ 0x7700
 8000652:	621a      	str	r2, [r3, #32]
	/* UART config */
	// enable UART2 clock
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8000654:	4b16      	ldr	r3, [pc, #88]	@ (80006b0 <UartInit+0x9c>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000658:	4a15      	ldr	r2, [pc, #84]	@ (80006b0 <UartInit+0x9c>)
 800065a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800065e:	6413      	str	r3, [r2, #64]	@ 0x40
	// UART2 config (8N1) = 8-bit data transfer=0, disable parity=0, tx en=1, rx en=1
	USART2->CR1 = USART_CR1_TE | USART_CR1_RE;
 8000660:	4b15      	ldr	r3, [pc, #84]	@ (80006b8 <UartInit+0xa4>)
 8000662:	220c      	movs	r2, #12
 8000664:	60da      	str	r2, [r3, #12]
	// baud rate setting
	if(baud == 9600)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	f5b3 5f16 	cmp.w	r3, #9600	@ 0x2580
 800066c:	d104      	bne.n	8000678 <UartInit+0x64>
		USART2->BRR = 0x0683;
 800066e:	4b12      	ldr	r3, [pc, #72]	@ (80006b8 <UartInit+0xa4>)
 8000670:	f240 6283 	movw	r2, #1667	@ 0x683
 8000674:	609a      	str	r2, [r3, #8]
 8000676:	e00f      	b.n	8000698 <UartInit+0x84>
	else if(baud == 38400)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	f5b3 4f16 	cmp.w	r3, #38400	@ 0x9600
 800067e:	d104      	bne.n	800068a <UartInit+0x76>
		USART2->BRR = 0x01A1;
 8000680:	4b0d      	ldr	r3, [pc, #52]	@ (80006b8 <UartInit+0xa4>)
 8000682:	f240 12a1 	movw	r2, #417	@ 0x1a1
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	e006      	b.n	8000698 <UartInit+0x84>
	else if(baud == 115200)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 8000690:	d102      	bne.n	8000698 <UartInit+0x84>
		USART2->BRR = 0x008B;
 8000692:	4b09      	ldr	r3, [pc, #36]	@ (80006b8 <UartInit+0xa4>)
 8000694:	228b      	movs	r2, #139	@ 0x8b
 8000696:	609a      	str	r2, [r3, #8]
	// enable uart=1
	USART2->CR1 |= USART_CR1_UE;
 8000698:	4b07      	ldr	r3, [pc, #28]	@ (80006b8 <UartInit+0xa4>)
 800069a:	68db      	ldr	r3, [r3, #12]
 800069c:	4a06      	ldr	r2, [pc, #24]	@ (80006b8 <UartInit+0xa4>)
 800069e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80006a2:	60d3      	str	r3, [r2, #12]
}
 80006a4:	bf00      	nop
 80006a6:	370c      	adds	r7, #12
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bc80      	pop	{r7}
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	40023800 	.word	0x40023800
 80006b4:	40020000 	.word	0x40020000
 80006b8:	40004400 	.word	0x40004400

080006bc <UartPutch>:

void UartPutch(int ch) {
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
	// write char in TDR
	USART2->DR = ch;
 80006c4:	4a07      	ldr	r2, [pc, #28]	@ (80006e4 <UartPutch+0x28>)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	6053      	str	r3, [r2, #4]
	// wait until Tx is done (until Tx regr is not empty)
	while((USART2->SR & USART_SR_TXE) == 0)
 80006ca:	bf00      	nop
 80006cc:	4b05      	ldr	r3, [pc, #20]	@ (80006e4 <UartPutch+0x28>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d0f9      	beq.n	80006cc <UartPutch+0x10>
		;
}
 80006d8:	bf00      	nop
 80006da:	bf00      	nop
 80006dc:	370c      	adds	r7, #12
 80006de:	46bd      	mov	sp, r7
 80006e0:	bc80      	pop	{r7}
 80006e2:	4770      	bx	lr
 80006e4:	40004400 	.word	0x40004400

080006e8 <UartPuts>:
	while((USART2->SR & USART_SR_RXNE) == 0);
	// read char from RDR
	return USART2->DR;
}

void UartPuts(char *str) {
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
	for(int i=0; str[i] != '\0'; i++)
 80006f0:	2300      	movs	r3, #0
 80006f2:	60fb      	str	r3, [r7, #12]
 80006f4:	e009      	b.n	800070a <UartPuts+0x22>
		UartPutch(str[i]);
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	687a      	ldr	r2, [r7, #4]
 80006fa:	4413      	add	r3, r2
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	4618      	mov	r0, r3
 8000700:	f7ff ffdc 	bl	80006bc <UartPutch>
	for(int i=0; str[i] != '\0'; i++)
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	3301      	adds	r3, #1
 8000708:	60fb      	str	r3, [r7, #12]
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	687a      	ldr	r2, [r7, #4]
 800070e:	4413      	add	r3, r2
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d1ef      	bne.n	80006f6 <UartPuts+0xe>
}
 8000716:	bf00      	nop
 8000718:	bf00      	nop
 800071a:	3710      	adds	r7, #16
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}

08000720 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000720:	480d      	ldr	r0, [pc, #52]	@ (8000758 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000722:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000724:	f7ff fed0 	bl	80004c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000728:	480c      	ldr	r0, [pc, #48]	@ (800075c <LoopForever+0x6>)
  ldr r1, =_edata
 800072a:	490d      	ldr	r1, [pc, #52]	@ (8000760 <LoopForever+0xa>)
  ldr r2, =_sidata
 800072c:	4a0d      	ldr	r2, [pc, #52]	@ (8000764 <LoopForever+0xe>)
  movs r3, #0
 800072e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000730:	e002      	b.n	8000738 <LoopCopyDataInit>

08000732 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000732:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000734:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000736:	3304      	adds	r3, #4

08000738 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000738:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800073a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800073c:	d3f9      	bcc.n	8000732 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800073e:	4a0a      	ldr	r2, [pc, #40]	@ (8000768 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000740:	4c0a      	ldr	r4, [pc, #40]	@ (800076c <LoopForever+0x16>)
  movs r3, #0
 8000742:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000744:	e001      	b.n	800074a <LoopFillZerobss>

08000746 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000746:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000748:	3204      	adds	r2, #4

0800074a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800074a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800074c:	d3fb      	bcc.n	8000746 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800074e:	f000 f839 	bl	80007c4 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8000752:	f7ff fe2b 	bl	80003ac <main>

08000756 <LoopForever>:

LoopForever:
  b LoopForever
 8000756:	e7fe      	b.n	8000756 <LoopForever>
  ldr   r0, =_estack
 8000758:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800075c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000760:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8000764:	08001104 	.word	0x08001104
  ldr r2, =_sbss
 8000768:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 800076c:	200001c0 	.word	0x200001c0

08000770 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000770:	e7fe      	b.n	8000770 <ADC_IRQHandler>
	...

08000774 <siprintf>:
 8000774:	b40e      	push	{r1, r2, r3}
 8000776:	b510      	push	{r4, lr}
 8000778:	b09d      	sub	sp, #116	@ 0x74
 800077a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800077c:	9002      	str	r0, [sp, #8]
 800077e:	9006      	str	r0, [sp, #24]
 8000780:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8000784:	480a      	ldr	r0, [pc, #40]	@ (80007b0 <siprintf+0x3c>)
 8000786:	9107      	str	r1, [sp, #28]
 8000788:	9104      	str	r1, [sp, #16]
 800078a:	490a      	ldr	r1, [pc, #40]	@ (80007b4 <siprintf+0x40>)
 800078c:	f853 2b04 	ldr.w	r2, [r3], #4
 8000790:	9105      	str	r1, [sp, #20]
 8000792:	2400      	movs	r4, #0
 8000794:	a902      	add	r1, sp, #8
 8000796:	6800      	ldr	r0, [r0, #0]
 8000798:	9301      	str	r3, [sp, #4]
 800079a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800079c:	f000 f98c 	bl	8000ab8 <_svfiprintf_r>
 80007a0:	9b02      	ldr	r3, [sp, #8]
 80007a2:	701c      	strb	r4, [r3, #0]
 80007a4:	b01d      	add	sp, #116	@ 0x74
 80007a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007aa:	b003      	add	sp, #12
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	20000004 	.word	0x20000004
 80007b4:	ffff0208 	.word	0xffff0208

080007b8 <__errno>:
 80007b8:	4b01      	ldr	r3, [pc, #4]	@ (80007c0 <__errno+0x8>)
 80007ba:	6818      	ldr	r0, [r3, #0]
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	20000004 	.word	0x20000004

080007c4 <__libc_init_array>:
 80007c4:	b570      	push	{r4, r5, r6, lr}
 80007c6:	4d0d      	ldr	r5, [pc, #52]	@ (80007fc <__libc_init_array+0x38>)
 80007c8:	4c0d      	ldr	r4, [pc, #52]	@ (8000800 <__libc_init_array+0x3c>)
 80007ca:	1b64      	subs	r4, r4, r5
 80007cc:	10a4      	asrs	r4, r4, #2
 80007ce:	2600      	movs	r6, #0
 80007d0:	42a6      	cmp	r6, r4
 80007d2:	d109      	bne.n	80007e8 <__libc_init_array+0x24>
 80007d4:	4d0b      	ldr	r5, [pc, #44]	@ (8000804 <__libc_init_array+0x40>)
 80007d6:	4c0c      	ldr	r4, [pc, #48]	@ (8000808 <__libc_init_array+0x44>)
 80007d8:	f000 fc64 	bl	80010a4 <_init>
 80007dc:	1b64      	subs	r4, r4, r5
 80007de:	10a4      	asrs	r4, r4, #2
 80007e0:	2600      	movs	r6, #0
 80007e2:	42a6      	cmp	r6, r4
 80007e4:	d105      	bne.n	80007f2 <__libc_init_array+0x2e>
 80007e6:	bd70      	pop	{r4, r5, r6, pc}
 80007e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80007ec:	4798      	blx	r3
 80007ee:	3601      	adds	r6, #1
 80007f0:	e7ee      	b.n	80007d0 <__libc_init_array+0xc>
 80007f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80007f6:	4798      	blx	r3
 80007f8:	3601      	adds	r6, #1
 80007fa:	e7f2      	b.n	80007e2 <__libc_init_array+0x1e>
 80007fc:	080010fc 	.word	0x080010fc
 8000800:	080010fc 	.word	0x080010fc
 8000804:	080010fc 	.word	0x080010fc
 8000808:	08001100 	.word	0x08001100

0800080c <__retarget_lock_acquire_recursive>:
 800080c:	4770      	bx	lr

0800080e <__retarget_lock_release_recursive>:
 800080e:	4770      	bx	lr

08000810 <_free_r>:
 8000810:	b538      	push	{r3, r4, r5, lr}
 8000812:	4605      	mov	r5, r0
 8000814:	2900      	cmp	r1, #0
 8000816:	d041      	beq.n	800089c <_free_r+0x8c>
 8000818:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800081c:	1f0c      	subs	r4, r1, #4
 800081e:	2b00      	cmp	r3, #0
 8000820:	bfb8      	it	lt
 8000822:	18e4      	addlt	r4, r4, r3
 8000824:	f000 f8e0 	bl	80009e8 <__malloc_lock>
 8000828:	4a1d      	ldr	r2, [pc, #116]	@ (80008a0 <_free_r+0x90>)
 800082a:	6813      	ldr	r3, [r2, #0]
 800082c:	b933      	cbnz	r3, 800083c <_free_r+0x2c>
 800082e:	6063      	str	r3, [r4, #4]
 8000830:	6014      	str	r4, [r2, #0]
 8000832:	4628      	mov	r0, r5
 8000834:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000838:	f000 b8dc 	b.w	80009f4 <__malloc_unlock>
 800083c:	42a3      	cmp	r3, r4
 800083e:	d908      	bls.n	8000852 <_free_r+0x42>
 8000840:	6820      	ldr	r0, [r4, #0]
 8000842:	1821      	adds	r1, r4, r0
 8000844:	428b      	cmp	r3, r1
 8000846:	bf01      	itttt	eq
 8000848:	6819      	ldreq	r1, [r3, #0]
 800084a:	685b      	ldreq	r3, [r3, #4]
 800084c:	1809      	addeq	r1, r1, r0
 800084e:	6021      	streq	r1, [r4, #0]
 8000850:	e7ed      	b.n	800082e <_free_r+0x1e>
 8000852:	461a      	mov	r2, r3
 8000854:	685b      	ldr	r3, [r3, #4]
 8000856:	b10b      	cbz	r3, 800085c <_free_r+0x4c>
 8000858:	42a3      	cmp	r3, r4
 800085a:	d9fa      	bls.n	8000852 <_free_r+0x42>
 800085c:	6811      	ldr	r1, [r2, #0]
 800085e:	1850      	adds	r0, r2, r1
 8000860:	42a0      	cmp	r0, r4
 8000862:	d10b      	bne.n	800087c <_free_r+0x6c>
 8000864:	6820      	ldr	r0, [r4, #0]
 8000866:	4401      	add	r1, r0
 8000868:	1850      	adds	r0, r2, r1
 800086a:	4283      	cmp	r3, r0
 800086c:	6011      	str	r1, [r2, #0]
 800086e:	d1e0      	bne.n	8000832 <_free_r+0x22>
 8000870:	6818      	ldr	r0, [r3, #0]
 8000872:	685b      	ldr	r3, [r3, #4]
 8000874:	6053      	str	r3, [r2, #4]
 8000876:	4408      	add	r0, r1
 8000878:	6010      	str	r0, [r2, #0]
 800087a:	e7da      	b.n	8000832 <_free_r+0x22>
 800087c:	d902      	bls.n	8000884 <_free_r+0x74>
 800087e:	230c      	movs	r3, #12
 8000880:	602b      	str	r3, [r5, #0]
 8000882:	e7d6      	b.n	8000832 <_free_r+0x22>
 8000884:	6820      	ldr	r0, [r4, #0]
 8000886:	1821      	adds	r1, r4, r0
 8000888:	428b      	cmp	r3, r1
 800088a:	bf04      	itt	eq
 800088c:	6819      	ldreq	r1, [r3, #0]
 800088e:	685b      	ldreq	r3, [r3, #4]
 8000890:	6063      	str	r3, [r4, #4]
 8000892:	bf04      	itt	eq
 8000894:	1809      	addeq	r1, r1, r0
 8000896:	6021      	streq	r1, [r4, #0]
 8000898:	6054      	str	r4, [r2, #4]
 800089a:	e7ca      	b.n	8000832 <_free_r+0x22>
 800089c:	bd38      	pop	{r3, r4, r5, pc}
 800089e:	bf00      	nop
 80008a0:	200001bc 	.word	0x200001bc

080008a4 <sbrk_aligned>:
 80008a4:	b570      	push	{r4, r5, r6, lr}
 80008a6:	4e0f      	ldr	r6, [pc, #60]	@ (80008e4 <sbrk_aligned+0x40>)
 80008a8:	460c      	mov	r4, r1
 80008aa:	6831      	ldr	r1, [r6, #0]
 80008ac:	4605      	mov	r5, r0
 80008ae:	b911      	cbnz	r1, 80008b6 <sbrk_aligned+0x12>
 80008b0:	f000 fba4 	bl	8000ffc <_sbrk_r>
 80008b4:	6030      	str	r0, [r6, #0]
 80008b6:	4621      	mov	r1, r4
 80008b8:	4628      	mov	r0, r5
 80008ba:	f000 fb9f 	bl	8000ffc <_sbrk_r>
 80008be:	1c43      	adds	r3, r0, #1
 80008c0:	d103      	bne.n	80008ca <sbrk_aligned+0x26>
 80008c2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80008c6:	4620      	mov	r0, r4
 80008c8:	bd70      	pop	{r4, r5, r6, pc}
 80008ca:	1cc4      	adds	r4, r0, #3
 80008cc:	f024 0403 	bic.w	r4, r4, #3
 80008d0:	42a0      	cmp	r0, r4
 80008d2:	d0f8      	beq.n	80008c6 <sbrk_aligned+0x22>
 80008d4:	1a21      	subs	r1, r4, r0
 80008d6:	4628      	mov	r0, r5
 80008d8:	f000 fb90 	bl	8000ffc <_sbrk_r>
 80008dc:	3001      	adds	r0, #1
 80008de:	d1f2      	bne.n	80008c6 <sbrk_aligned+0x22>
 80008e0:	e7ef      	b.n	80008c2 <sbrk_aligned+0x1e>
 80008e2:	bf00      	nop
 80008e4:	200001b8 	.word	0x200001b8

080008e8 <_malloc_r>:
 80008e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80008ec:	1ccd      	adds	r5, r1, #3
 80008ee:	f025 0503 	bic.w	r5, r5, #3
 80008f2:	3508      	adds	r5, #8
 80008f4:	2d0c      	cmp	r5, #12
 80008f6:	bf38      	it	cc
 80008f8:	250c      	movcc	r5, #12
 80008fa:	2d00      	cmp	r5, #0
 80008fc:	4606      	mov	r6, r0
 80008fe:	db01      	blt.n	8000904 <_malloc_r+0x1c>
 8000900:	42a9      	cmp	r1, r5
 8000902:	d904      	bls.n	800090e <_malloc_r+0x26>
 8000904:	230c      	movs	r3, #12
 8000906:	6033      	str	r3, [r6, #0]
 8000908:	2000      	movs	r0, #0
 800090a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800090e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80009e4 <_malloc_r+0xfc>
 8000912:	f000 f869 	bl	80009e8 <__malloc_lock>
 8000916:	f8d8 3000 	ldr.w	r3, [r8]
 800091a:	461c      	mov	r4, r3
 800091c:	bb44      	cbnz	r4, 8000970 <_malloc_r+0x88>
 800091e:	4629      	mov	r1, r5
 8000920:	4630      	mov	r0, r6
 8000922:	f7ff ffbf 	bl	80008a4 <sbrk_aligned>
 8000926:	1c43      	adds	r3, r0, #1
 8000928:	4604      	mov	r4, r0
 800092a:	d158      	bne.n	80009de <_malloc_r+0xf6>
 800092c:	f8d8 4000 	ldr.w	r4, [r8]
 8000930:	4627      	mov	r7, r4
 8000932:	2f00      	cmp	r7, #0
 8000934:	d143      	bne.n	80009be <_malloc_r+0xd6>
 8000936:	2c00      	cmp	r4, #0
 8000938:	d04b      	beq.n	80009d2 <_malloc_r+0xea>
 800093a:	6823      	ldr	r3, [r4, #0]
 800093c:	4639      	mov	r1, r7
 800093e:	4630      	mov	r0, r6
 8000940:	eb04 0903 	add.w	r9, r4, r3
 8000944:	f000 fb5a 	bl	8000ffc <_sbrk_r>
 8000948:	4581      	cmp	r9, r0
 800094a:	d142      	bne.n	80009d2 <_malloc_r+0xea>
 800094c:	6821      	ldr	r1, [r4, #0]
 800094e:	1a6d      	subs	r5, r5, r1
 8000950:	4629      	mov	r1, r5
 8000952:	4630      	mov	r0, r6
 8000954:	f7ff ffa6 	bl	80008a4 <sbrk_aligned>
 8000958:	3001      	adds	r0, #1
 800095a:	d03a      	beq.n	80009d2 <_malloc_r+0xea>
 800095c:	6823      	ldr	r3, [r4, #0]
 800095e:	442b      	add	r3, r5
 8000960:	6023      	str	r3, [r4, #0]
 8000962:	f8d8 3000 	ldr.w	r3, [r8]
 8000966:	685a      	ldr	r2, [r3, #4]
 8000968:	bb62      	cbnz	r2, 80009c4 <_malloc_r+0xdc>
 800096a:	f8c8 7000 	str.w	r7, [r8]
 800096e:	e00f      	b.n	8000990 <_malloc_r+0xa8>
 8000970:	6822      	ldr	r2, [r4, #0]
 8000972:	1b52      	subs	r2, r2, r5
 8000974:	d420      	bmi.n	80009b8 <_malloc_r+0xd0>
 8000976:	2a0b      	cmp	r2, #11
 8000978:	d917      	bls.n	80009aa <_malloc_r+0xc2>
 800097a:	1961      	adds	r1, r4, r5
 800097c:	42a3      	cmp	r3, r4
 800097e:	6025      	str	r5, [r4, #0]
 8000980:	bf18      	it	ne
 8000982:	6059      	strne	r1, [r3, #4]
 8000984:	6863      	ldr	r3, [r4, #4]
 8000986:	bf08      	it	eq
 8000988:	f8c8 1000 	streq.w	r1, [r8]
 800098c:	5162      	str	r2, [r4, r5]
 800098e:	604b      	str	r3, [r1, #4]
 8000990:	4630      	mov	r0, r6
 8000992:	f000 f82f 	bl	80009f4 <__malloc_unlock>
 8000996:	f104 000b 	add.w	r0, r4, #11
 800099a:	1d23      	adds	r3, r4, #4
 800099c:	f020 0007 	bic.w	r0, r0, #7
 80009a0:	1ac2      	subs	r2, r0, r3
 80009a2:	bf1c      	itt	ne
 80009a4:	1a1b      	subne	r3, r3, r0
 80009a6:	50a3      	strne	r3, [r4, r2]
 80009a8:	e7af      	b.n	800090a <_malloc_r+0x22>
 80009aa:	6862      	ldr	r2, [r4, #4]
 80009ac:	42a3      	cmp	r3, r4
 80009ae:	bf0c      	ite	eq
 80009b0:	f8c8 2000 	streq.w	r2, [r8]
 80009b4:	605a      	strne	r2, [r3, #4]
 80009b6:	e7eb      	b.n	8000990 <_malloc_r+0xa8>
 80009b8:	4623      	mov	r3, r4
 80009ba:	6864      	ldr	r4, [r4, #4]
 80009bc:	e7ae      	b.n	800091c <_malloc_r+0x34>
 80009be:	463c      	mov	r4, r7
 80009c0:	687f      	ldr	r7, [r7, #4]
 80009c2:	e7b6      	b.n	8000932 <_malloc_r+0x4a>
 80009c4:	461a      	mov	r2, r3
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	42a3      	cmp	r3, r4
 80009ca:	d1fb      	bne.n	80009c4 <_malloc_r+0xdc>
 80009cc:	2300      	movs	r3, #0
 80009ce:	6053      	str	r3, [r2, #4]
 80009d0:	e7de      	b.n	8000990 <_malloc_r+0xa8>
 80009d2:	230c      	movs	r3, #12
 80009d4:	6033      	str	r3, [r6, #0]
 80009d6:	4630      	mov	r0, r6
 80009d8:	f000 f80c 	bl	80009f4 <__malloc_unlock>
 80009dc:	e794      	b.n	8000908 <_malloc_r+0x20>
 80009de:	6005      	str	r5, [r0, #0]
 80009e0:	e7d6      	b.n	8000990 <_malloc_r+0xa8>
 80009e2:	bf00      	nop
 80009e4:	200001bc 	.word	0x200001bc

080009e8 <__malloc_lock>:
 80009e8:	4801      	ldr	r0, [pc, #4]	@ (80009f0 <__malloc_lock+0x8>)
 80009ea:	f7ff bf0f 	b.w	800080c <__retarget_lock_acquire_recursive>
 80009ee:	bf00      	nop
 80009f0:	200001b4 	.word	0x200001b4

080009f4 <__malloc_unlock>:
 80009f4:	4801      	ldr	r0, [pc, #4]	@ (80009fc <__malloc_unlock+0x8>)
 80009f6:	f7ff bf0a 	b.w	800080e <__retarget_lock_release_recursive>
 80009fa:	bf00      	nop
 80009fc:	200001b4 	.word	0x200001b4

08000a00 <__ssputs_r>:
 8000a00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a04:	688e      	ldr	r6, [r1, #8]
 8000a06:	461f      	mov	r7, r3
 8000a08:	42be      	cmp	r6, r7
 8000a0a:	680b      	ldr	r3, [r1, #0]
 8000a0c:	4682      	mov	sl, r0
 8000a0e:	460c      	mov	r4, r1
 8000a10:	4690      	mov	r8, r2
 8000a12:	d82d      	bhi.n	8000a70 <__ssputs_r+0x70>
 8000a14:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000a18:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8000a1c:	d026      	beq.n	8000a6c <__ssputs_r+0x6c>
 8000a1e:	6965      	ldr	r5, [r4, #20]
 8000a20:	6909      	ldr	r1, [r1, #16]
 8000a22:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000a26:	eba3 0901 	sub.w	r9, r3, r1
 8000a2a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000a2e:	1c7b      	adds	r3, r7, #1
 8000a30:	444b      	add	r3, r9
 8000a32:	106d      	asrs	r5, r5, #1
 8000a34:	429d      	cmp	r5, r3
 8000a36:	bf38      	it	cc
 8000a38:	461d      	movcc	r5, r3
 8000a3a:	0553      	lsls	r3, r2, #21
 8000a3c:	d527      	bpl.n	8000a8e <__ssputs_r+0x8e>
 8000a3e:	4629      	mov	r1, r5
 8000a40:	f7ff ff52 	bl	80008e8 <_malloc_r>
 8000a44:	4606      	mov	r6, r0
 8000a46:	b360      	cbz	r0, 8000aa2 <__ssputs_r+0xa2>
 8000a48:	6921      	ldr	r1, [r4, #16]
 8000a4a:	464a      	mov	r2, r9
 8000a4c:	f000 fae6 	bl	800101c <memcpy>
 8000a50:	89a3      	ldrh	r3, [r4, #12]
 8000a52:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8000a56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a5a:	81a3      	strh	r3, [r4, #12]
 8000a5c:	6126      	str	r6, [r4, #16]
 8000a5e:	6165      	str	r5, [r4, #20]
 8000a60:	444e      	add	r6, r9
 8000a62:	eba5 0509 	sub.w	r5, r5, r9
 8000a66:	6026      	str	r6, [r4, #0]
 8000a68:	60a5      	str	r5, [r4, #8]
 8000a6a:	463e      	mov	r6, r7
 8000a6c:	42be      	cmp	r6, r7
 8000a6e:	d900      	bls.n	8000a72 <__ssputs_r+0x72>
 8000a70:	463e      	mov	r6, r7
 8000a72:	6820      	ldr	r0, [r4, #0]
 8000a74:	4632      	mov	r2, r6
 8000a76:	4641      	mov	r1, r8
 8000a78:	f000 faa6 	bl	8000fc8 <memmove>
 8000a7c:	68a3      	ldr	r3, [r4, #8]
 8000a7e:	1b9b      	subs	r3, r3, r6
 8000a80:	60a3      	str	r3, [r4, #8]
 8000a82:	6823      	ldr	r3, [r4, #0]
 8000a84:	4433      	add	r3, r6
 8000a86:	6023      	str	r3, [r4, #0]
 8000a88:	2000      	movs	r0, #0
 8000a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a8e:	462a      	mov	r2, r5
 8000a90:	f000 fad2 	bl	8001038 <_realloc_r>
 8000a94:	4606      	mov	r6, r0
 8000a96:	2800      	cmp	r0, #0
 8000a98:	d1e0      	bne.n	8000a5c <__ssputs_r+0x5c>
 8000a9a:	6921      	ldr	r1, [r4, #16]
 8000a9c:	4650      	mov	r0, sl
 8000a9e:	f7ff feb7 	bl	8000810 <_free_r>
 8000aa2:	230c      	movs	r3, #12
 8000aa4:	f8ca 3000 	str.w	r3, [sl]
 8000aa8:	89a3      	ldrh	r3, [r4, #12]
 8000aaa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000aae:	81a3      	strh	r3, [r4, #12]
 8000ab0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ab4:	e7e9      	b.n	8000a8a <__ssputs_r+0x8a>
	...

08000ab8 <_svfiprintf_r>:
 8000ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000abc:	4698      	mov	r8, r3
 8000abe:	898b      	ldrh	r3, [r1, #12]
 8000ac0:	061b      	lsls	r3, r3, #24
 8000ac2:	b09d      	sub	sp, #116	@ 0x74
 8000ac4:	4607      	mov	r7, r0
 8000ac6:	460d      	mov	r5, r1
 8000ac8:	4614      	mov	r4, r2
 8000aca:	d510      	bpl.n	8000aee <_svfiprintf_r+0x36>
 8000acc:	690b      	ldr	r3, [r1, #16]
 8000ace:	b973      	cbnz	r3, 8000aee <_svfiprintf_r+0x36>
 8000ad0:	2140      	movs	r1, #64	@ 0x40
 8000ad2:	f7ff ff09 	bl	80008e8 <_malloc_r>
 8000ad6:	6028      	str	r0, [r5, #0]
 8000ad8:	6128      	str	r0, [r5, #16]
 8000ada:	b930      	cbnz	r0, 8000aea <_svfiprintf_r+0x32>
 8000adc:	230c      	movs	r3, #12
 8000ade:	603b      	str	r3, [r7, #0]
 8000ae0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ae4:	b01d      	add	sp, #116	@ 0x74
 8000ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000aea:	2340      	movs	r3, #64	@ 0x40
 8000aec:	616b      	str	r3, [r5, #20]
 8000aee:	2300      	movs	r3, #0
 8000af0:	9309      	str	r3, [sp, #36]	@ 0x24
 8000af2:	2320      	movs	r3, #32
 8000af4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000af8:	f8cd 800c 	str.w	r8, [sp, #12]
 8000afc:	2330      	movs	r3, #48	@ 0x30
 8000afe:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8000c9c <_svfiprintf_r+0x1e4>
 8000b02:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000b06:	f04f 0901 	mov.w	r9, #1
 8000b0a:	4623      	mov	r3, r4
 8000b0c:	469a      	mov	sl, r3
 8000b0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000b12:	b10a      	cbz	r2, 8000b18 <_svfiprintf_r+0x60>
 8000b14:	2a25      	cmp	r2, #37	@ 0x25
 8000b16:	d1f9      	bne.n	8000b0c <_svfiprintf_r+0x54>
 8000b18:	ebba 0b04 	subs.w	fp, sl, r4
 8000b1c:	d00b      	beq.n	8000b36 <_svfiprintf_r+0x7e>
 8000b1e:	465b      	mov	r3, fp
 8000b20:	4622      	mov	r2, r4
 8000b22:	4629      	mov	r1, r5
 8000b24:	4638      	mov	r0, r7
 8000b26:	f7ff ff6b 	bl	8000a00 <__ssputs_r>
 8000b2a:	3001      	adds	r0, #1
 8000b2c:	f000 80a7 	beq.w	8000c7e <_svfiprintf_r+0x1c6>
 8000b30:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000b32:	445a      	add	r2, fp
 8000b34:	9209      	str	r2, [sp, #36]	@ 0x24
 8000b36:	f89a 3000 	ldrb.w	r3, [sl]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	f000 809f 	beq.w	8000c7e <_svfiprintf_r+0x1c6>
 8000b40:	2300      	movs	r3, #0
 8000b42:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000b46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000b4a:	f10a 0a01 	add.w	sl, sl, #1
 8000b4e:	9304      	str	r3, [sp, #16]
 8000b50:	9307      	str	r3, [sp, #28]
 8000b52:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000b56:	931a      	str	r3, [sp, #104]	@ 0x68
 8000b58:	4654      	mov	r4, sl
 8000b5a:	2205      	movs	r2, #5
 8000b5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b60:	484e      	ldr	r0, [pc, #312]	@ (8000c9c <_svfiprintf_r+0x1e4>)
 8000b62:	f7ff fb35 	bl	80001d0 <memchr>
 8000b66:	9a04      	ldr	r2, [sp, #16]
 8000b68:	b9d8      	cbnz	r0, 8000ba2 <_svfiprintf_r+0xea>
 8000b6a:	06d0      	lsls	r0, r2, #27
 8000b6c:	bf44      	itt	mi
 8000b6e:	2320      	movmi	r3, #32
 8000b70:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000b74:	0711      	lsls	r1, r2, #28
 8000b76:	bf44      	itt	mi
 8000b78:	232b      	movmi	r3, #43	@ 0x2b
 8000b7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000b7e:	f89a 3000 	ldrb.w	r3, [sl]
 8000b82:	2b2a      	cmp	r3, #42	@ 0x2a
 8000b84:	d015      	beq.n	8000bb2 <_svfiprintf_r+0xfa>
 8000b86:	9a07      	ldr	r2, [sp, #28]
 8000b88:	4654      	mov	r4, sl
 8000b8a:	2000      	movs	r0, #0
 8000b8c:	f04f 0c0a 	mov.w	ip, #10
 8000b90:	4621      	mov	r1, r4
 8000b92:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000b96:	3b30      	subs	r3, #48	@ 0x30
 8000b98:	2b09      	cmp	r3, #9
 8000b9a:	d94b      	bls.n	8000c34 <_svfiprintf_r+0x17c>
 8000b9c:	b1b0      	cbz	r0, 8000bcc <_svfiprintf_r+0x114>
 8000b9e:	9207      	str	r2, [sp, #28]
 8000ba0:	e014      	b.n	8000bcc <_svfiprintf_r+0x114>
 8000ba2:	eba0 0308 	sub.w	r3, r0, r8
 8000ba6:	fa09 f303 	lsl.w	r3, r9, r3
 8000baa:	4313      	orrs	r3, r2
 8000bac:	9304      	str	r3, [sp, #16]
 8000bae:	46a2      	mov	sl, r4
 8000bb0:	e7d2      	b.n	8000b58 <_svfiprintf_r+0xa0>
 8000bb2:	9b03      	ldr	r3, [sp, #12]
 8000bb4:	1d19      	adds	r1, r3, #4
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	9103      	str	r1, [sp, #12]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	bfbb      	ittet	lt
 8000bbe:	425b      	neglt	r3, r3
 8000bc0:	f042 0202 	orrlt.w	r2, r2, #2
 8000bc4:	9307      	strge	r3, [sp, #28]
 8000bc6:	9307      	strlt	r3, [sp, #28]
 8000bc8:	bfb8      	it	lt
 8000bca:	9204      	strlt	r2, [sp, #16]
 8000bcc:	7823      	ldrb	r3, [r4, #0]
 8000bce:	2b2e      	cmp	r3, #46	@ 0x2e
 8000bd0:	d10a      	bne.n	8000be8 <_svfiprintf_r+0x130>
 8000bd2:	7863      	ldrb	r3, [r4, #1]
 8000bd4:	2b2a      	cmp	r3, #42	@ 0x2a
 8000bd6:	d132      	bne.n	8000c3e <_svfiprintf_r+0x186>
 8000bd8:	9b03      	ldr	r3, [sp, #12]
 8000bda:	1d1a      	adds	r2, r3, #4
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	9203      	str	r2, [sp, #12]
 8000be0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000be4:	3402      	adds	r4, #2
 8000be6:	9305      	str	r3, [sp, #20]
 8000be8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8000ca0 <_svfiprintf_r+0x1e8>
 8000bec:	7821      	ldrb	r1, [r4, #0]
 8000bee:	2203      	movs	r2, #3
 8000bf0:	4650      	mov	r0, sl
 8000bf2:	f7ff faed 	bl	80001d0 <memchr>
 8000bf6:	b138      	cbz	r0, 8000c08 <_svfiprintf_r+0x150>
 8000bf8:	9b04      	ldr	r3, [sp, #16]
 8000bfa:	eba0 000a 	sub.w	r0, r0, sl
 8000bfe:	2240      	movs	r2, #64	@ 0x40
 8000c00:	4082      	lsls	r2, r0
 8000c02:	4313      	orrs	r3, r2
 8000c04:	3401      	adds	r4, #1
 8000c06:	9304      	str	r3, [sp, #16]
 8000c08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c0c:	4825      	ldr	r0, [pc, #148]	@ (8000ca4 <_svfiprintf_r+0x1ec>)
 8000c0e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000c12:	2206      	movs	r2, #6
 8000c14:	f7ff fadc 	bl	80001d0 <memchr>
 8000c18:	2800      	cmp	r0, #0
 8000c1a:	d036      	beq.n	8000c8a <_svfiprintf_r+0x1d2>
 8000c1c:	4b22      	ldr	r3, [pc, #136]	@ (8000ca8 <_svfiprintf_r+0x1f0>)
 8000c1e:	bb1b      	cbnz	r3, 8000c68 <_svfiprintf_r+0x1b0>
 8000c20:	9b03      	ldr	r3, [sp, #12]
 8000c22:	3307      	adds	r3, #7
 8000c24:	f023 0307 	bic.w	r3, r3, #7
 8000c28:	3308      	adds	r3, #8
 8000c2a:	9303      	str	r3, [sp, #12]
 8000c2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000c2e:	4433      	add	r3, r6
 8000c30:	9309      	str	r3, [sp, #36]	@ 0x24
 8000c32:	e76a      	b.n	8000b0a <_svfiprintf_r+0x52>
 8000c34:	fb0c 3202 	mla	r2, ip, r2, r3
 8000c38:	460c      	mov	r4, r1
 8000c3a:	2001      	movs	r0, #1
 8000c3c:	e7a8      	b.n	8000b90 <_svfiprintf_r+0xd8>
 8000c3e:	2300      	movs	r3, #0
 8000c40:	3401      	adds	r4, #1
 8000c42:	9305      	str	r3, [sp, #20]
 8000c44:	4619      	mov	r1, r3
 8000c46:	f04f 0c0a 	mov.w	ip, #10
 8000c4a:	4620      	mov	r0, r4
 8000c4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000c50:	3a30      	subs	r2, #48	@ 0x30
 8000c52:	2a09      	cmp	r2, #9
 8000c54:	d903      	bls.n	8000c5e <_svfiprintf_r+0x1a6>
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d0c6      	beq.n	8000be8 <_svfiprintf_r+0x130>
 8000c5a:	9105      	str	r1, [sp, #20]
 8000c5c:	e7c4      	b.n	8000be8 <_svfiprintf_r+0x130>
 8000c5e:	fb0c 2101 	mla	r1, ip, r1, r2
 8000c62:	4604      	mov	r4, r0
 8000c64:	2301      	movs	r3, #1
 8000c66:	e7f0      	b.n	8000c4a <_svfiprintf_r+0x192>
 8000c68:	ab03      	add	r3, sp, #12
 8000c6a:	9300      	str	r3, [sp, #0]
 8000c6c:	462a      	mov	r2, r5
 8000c6e:	4b0f      	ldr	r3, [pc, #60]	@ (8000cac <_svfiprintf_r+0x1f4>)
 8000c70:	a904      	add	r1, sp, #16
 8000c72:	4638      	mov	r0, r7
 8000c74:	f3af 8000 	nop.w
 8000c78:	1c42      	adds	r2, r0, #1
 8000c7a:	4606      	mov	r6, r0
 8000c7c:	d1d6      	bne.n	8000c2c <_svfiprintf_r+0x174>
 8000c7e:	89ab      	ldrh	r3, [r5, #12]
 8000c80:	065b      	lsls	r3, r3, #25
 8000c82:	f53f af2d 	bmi.w	8000ae0 <_svfiprintf_r+0x28>
 8000c86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000c88:	e72c      	b.n	8000ae4 <_svfiprintf_r+0x2c>
 8000c8a:	ab03      	add	r3, sp, #12
 8000c8c:	9300      	str	r3, [sp, #0]
 8000c8e:	462a      	mov	r2, r5
 8000c90:	4b06      	ldr	r3, [pc, #24]	@ (8000cac <_svfiprintf_r+0x1f4>)
 8000c92:	a904      	add	r1, sp, #16
 8000c94:	4638      	mov	r0, r7
 8000c96:	f000 f879 	bl	8000d8c <_printf_i>
 8000c9a:	e7ed      	b.n	8000c78 <_svfiprintf_r+0x1c0>
 8000c9c:	080010c1 	.word	0x080010c1
 8000ca0:	080010c7 	.word	0x080010c7
 8000ca4:	080010cb 	.word	0x080010cb
 8000ca8:	00000000 	.word	0x00000000
 8000cac:	08000a01 	.word	0x08000a01

08000cb0 <_printf_common>:
 8000cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cb4:	4616      	mov	r6, r2
 8000cb6:	4698      	mov	r8, r3
 8000cb8:	688a      	ldr	r2, [r1, #8]
 8000cba:	690b      	ldr	r3, [r1, #16]
 8000cbc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	bfb8      	it	lt
 8000cc4:	4613      	movlt	r3, r2
 8000cc6:	6033      	str	r3, [r6, #0]
 8000cc8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000ccc:	4607      	mov	r7, r0
 8000cce:	460c      	mov	r4, r1
 8000cd0:	b10a      	cbz	r2, 8000cd6 <_printf_common+0x26>
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	6033      	str	r3, [r6, #0]
 8000cd6:	6823      	ldr	r3, [r4, #0]
 8000cd8:	0699      	lsls	r1, r3, #26
 8000cda:	bf42      	ittt	mi
 8000cdc:	6833      	ldrmi	r3, [r6, #0]
 8000cde:	3302      	addmi	r3, #2
 8000ce0:	6033      	strmi	r3, [r6, #0]
 8000ce2:	6825      	ldr	r5, [r4, #0]
 8000ce4:	f015 0506 	ands.w	r5, r5, #6
 8000ce8:	d106      	bne.n	8000cf8 <_printf_common+0x48>
 8000cea:	f104 0a19 	add.w	sl, r4, #25
 8000cee:	68e3      	ldr	r3, [r4, #12]
 8000cf0:	6832      	ldr	r2, [r6, #0]
 8000cf2:	1a9b      	subs	r3, r3, r2
 8000cf4:	42ab      	cmp	r3, r5
 8000cf6:	dc26      	bgt.n	8000d46 <_printf_common+0x96>
 8000cf8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000cfc:	6822      	ldr	r2, [r4, #0]
 8000cfe:	3b00      	subs	r3, #0
 8000d00:	bf18      	it	ne
 8000d02:	2301      	movne	r3, #1
 8000d04:	0692      	lsls	r2, r2, #26
 8000d06:	d42b      	bmi.n	8000d60 <_printf_common+0xb0>
 8000d08:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000d0c:	4641      	mov	r1, r8
 8000d0e:	4638      	mov	r0, r7
 8000d10:	47c8      	blx	r9
 8000d12:	3001      	adds	r0, #1
 8000d14:	d01e      	beq.n	8000d54 <_printf_common+0xa4>
 8000d16:	6823      	ldr	r3, [r4, #0]
 8000d18:	6922      	ldr	r2, [r4, #16]
 8000d1a:	f003 0306 	and.w	r3, r3, #6
 8000d1e:	2b04      	cmp	r3, #4
 8000d20:	bf02      	ittt	eq
 8000d22:	68e5      	ldreq	r5, [r4, #12]
 8000d24:	6833      	ldreq	r3, [r6, #0]
 8000d26:	1aed      	subeq	r5, r5, r3
 8000d28:	68a3      	ldr	r3, [r4, #8]
 8000d2a:	bf0c      	ite	eq
 8000d2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000d30:	2500      	movne	r5, #0
 8000d32:	4293      	cmp	r3, r2
 8000d34:	bfc4      	itt	gt
 8000d36:	1a9b      	subgt	r3, r3, r2
 8000d38:	18ed      	addgt	r5, r5, r3
 8000d3a:	2600      	movs	r6, #0
 8000d3c:	341a      	adds	r4, #26
 8000d3e:	42b5      	cmp	r5, r6
 8000d40:	d11a      	bne.n	8000d78 <_printf_common+0xc8>
 8000d42:	2000      	movs	r0, #0
 8000d44:	e008      	b.n	8000d58 <_printf_common+0xa8>
 8000d46:	2301      	movs	r3, #1
 8000d48:	4652      	mov	r2, sl
 8000d4a:	4641      	mov	r1, r8
 8000d4c:	4638      	mov	r0, r7
 8000d4e:	47c8      	blx	r9
 8000d50:	3001      	adds	r0, #1
 8000d52:	d103      	bne.n	8000d5c <_printf_common+0xac>
 8000d54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5c:	3501      	adds	r5, #1
 8000d5e:	e7c6      	b.n	8000cee <_printf_common+0x3e>
 8000d60:	18e1      	adds	r1, r4, r3
 8000d62:	1c5a      	adds	r2, r3, #1
 8000d64:	2030      	movs	r0, #48	@ 0x30
 8000d66:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000d6a:	4422      	add	r2, r4
 8000d6c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000d70:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000d74:	3302      	adds	r3, #2
 8000d76:	e7c7      	b.n	8000d08 <_printf_common+0x58>
 8000d78:	2301      	movs	r3, #1
 8000d7a:	4622      	mov	r2, r4
 8000d7c:	4641      	mov	r1, r8
 8000d7e:	4638      	mov	r0, r7
 8000d80:	47c8      	blx	r9
 8000d82:	3001      	adds	r0, #1
 8000d84:	d0e6      	beq.n	8000d54 <_printf_common+0xa4>
 8000d86:	3601      	adds	r6, #1
 8000d88:	e7d9      	b.n	8000d3e <_printf_common+0x8e>
	...

08000d8c <_printf_i>:
 8000d8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000d90:	7e0f      	ldrb	r7, [r1, #24]
 8000d92:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000d94:	2f78      	cmp	r7, #120	@ 0x78
 8000d96:	4691      	mov	r9, r2
 8000d98:	4680      	mov	r8, r0
 8000d9a:	460c      	mov	r4, r1
 8000d9c:	469a      	mov	sl, r3
 8000d9e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000da2:	d807      	bhi.n	8000db4 <_printf_i+0x28>
 8000da4:	2f62      	cmp	r7, #98	@ 0x62
 8000da6:	d80a      	bhi.n	8000dbe <_printf_i+0x32>
 8000da8:	2f00      	cmp	r7, #0
 8000daa:	f000 80d1 	beq.w	8000f50 <_printf_i+0x1c4>
 8000dae:	2f58      	cmp	r7, #88	@ 0x58
 8000db0:	f000 80b8 	beq.w	8000f24 <_printf_i+0x198>
 8000db4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000db8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000dbc:	e03a      	b.n	8000e34 <_printf_i+0xa8>
 8000dbe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000dc2:	2b15      	cmp	r3, #21
 8000dc4:	d8f6      	bhi.n	8000db4 <_printf_i+0x28>
 8000dc6:	a101      	add	r1, pc, #4	@ (adr r1, 8000dcc <_printf_i+0x40>)
 8000dc8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000dcc:	08000e25 	.word	0x08000e25
 8000dd0:	08000e39 	.word	0x08000e39
 8000dd4:	08000db5 	.word	0x08000db5
 8000dd8:	08000db5 	.word	0x08000db5
 8000ddc:	08000db5 	.word	0x08000db5
 8000de0:	08000db5 	.word	0x08000db5
 8000de4:	08000e39 	.word	0x08000e39
 8000de8:	08000db5 	.word	0x08000db5
 8000dec:	08000db5 	.word	0x08000db5
 8000df0:	08000db5 	.word	0x08000db5
 8000df4:	08000db5 	.word	0x08000db5
 8000df8:	08000f37 	.word	0x08000f37
 8000dfc:	08000e63 	.word	0x08000e63
 8000e00:	08000ef1 	.word	0x08000ef1
 8000e04:	08000db5 	.word	0x08000db5
 8000e08:	08000db5 	.word	0x08000db5
 8000e0c:	08000f59 	.word	0x08000f59
 8000e10:	08000db5 	.word	0x08000db5
 8000e14:	08000e63 	.word	0x08000e63
 8000e18:	08000db5 	.word	0x08000db5
 8000e1c:	08000db5 	.word	0x08000db5
 8000e20:	08000ef9 	.word	0x08000ef9
 8000e24:	6833      	ldr	r3, [r6, #0]
 8000e26:	1d1a      	adds	r2, r3, #4
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	6032      	str	r2, [r6, #0]
 8000e2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000e30:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000e34:	2301      	movs	r3, #1
 8000e36:	e09c      	b.n	8000f72 <_printf_i+0x1e6>
 8000e38:	6833      	ldr	r3, [r6, #0]
 8000e3a:	6820      	ldr	r0, [r4, #0]
 8000e3c:	1d19      	adds	r1, r3, #4
 8000e3e:	6031      	str	r1, [r6, #0]
 8000e40:	0606      	lsls	r6, r0, #24
 8000e42:	d501      	bpl.n	8000e48 <_printf_i+0xbc>
 8000e44:	681d      	ldr	r5, [r3, #0]
 8000e46:	e003      	b.n	8000e50 <_printf_i+0xc4>
 8000e48:	0645      	lsls	r5, r0, #25
 8000e4a:	d5fb      	bpl.n	8000e44 <_printf_i+0xb8>
 8000e4c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000e50:	2d00      	cmp	r5, #0
 8000e52:	da03      	bge.n	8000e5c <_printf_i+0xd0>
 8000e54:	232d      	movs	r3, #45	@ 0x2d
 8000e56:	426d      	negs	r5, r5
 8000e58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000e5c:	4858      	ldr	r0, [pc, #352]	@ (8000fc0 <_printf_i+0x234>)
 8000e5e:	230a      	movs	r3, #10
 8000e60:	e011      	b.n	8000e86 <_printf_i+0xfa>
 8000e62:	6821      	ldr	r1, [r4, #0]
 8000e64:	6833      	ldr	r3, [r6, #0]
 8000e66:	0608      	lsls	r0, r1, #24
 8000e68:	f853 5b04 	ldr.w	r5, [r3], #4
 8000e6c:	d402      	bmi.n	8000e74 <_printf_i+0xe8>
 8000e6e:	0649      	lsls	r1, r1, #25
 8000e70:	bf48      	it	mi
 8000e72:	b2ad      	uxthmi	r5, r5
 8000e74:	2f6f      	cmp	r7, #111	@ 0x6f
 8000e76:	4852      	ldr	r0, [pc, #328]	@ (8000fc0 <_printf_i+0x234>)
 8000e78:	6033      	str	r3, [r6, #0]
 8000e7a:	bf14      	ite	ne
 8000e7c:	230a      	movne	r3, #10
 8000e7e:	2308      	moveq	r3, #8
 8000e80:	2100      	movs	r1, #0
 8000e82:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8000e86:	6866      	ldr	r6, [r4, #4]
 8000e88:	60a6      	str	r6, [r4, #8]
 8000e8a:	2e00      	cmp	r6, #0
 8000e8c:	db05      	blt.n	8000e9a <_printf_i+0x10e>
 8000e8e:	6821      	ldr	r1, [r4, #0]
 8000e90:	432e      	orrs	r6, r5
 8000e92:	f021 0104 	bic.w	r1, r1, #4
 8000e96:	6021      	str	r1, [r4, #0]
 8000e98:	d04b      	beq.n	8000f32 <_printf_i+0x1a6>
 8000e9a:	4616      	mov	r6, r2
 8000e9c:	fbb5 f1f3 	udiv	r1, r5, r3
 8000ea0:	fb03 5711 	mls	r7, r3, r1, r5
 8000ea4:	5dc7      	ldrb	r7, [r0, r7]
 8000ea6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000eaa:	462f      	mov	r7, r5
 8000eac:	42bb      	cmp	r3, r7
 8000eae:	460d      	mov	r5, r1
 8000eb0:	d9f4      	bls.n	8000e9c <_printf_i+0x110>
 8000eb2:	2b08      	cmp	r3, #8
 8000eb4:	d10b      	bne.n	8000ece <_printf_i+0x142>
 8000eb6:	6823      	ldr	r3, [r4, #0]
 8000eb8:	07df      	lsls	r7, r3, #31
 8000eba:	d508      	bpl.n	8000ece <_printf_i+0x142>
 8000ebc:	6923      	ldr	r3, [r4, #16]
 8000ebe:	6861      	ldr	r1, [r4, #4]
 8000ec0:	4299      	cmp	r1, r3
 8000ec2:	bfde      	ittt	le
 8000ec4:	2330      	movle	r3, #48	@ 0x30
 8000ec6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000eca:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8000ece:	1b92      	subs	r2, r2, r6
 8000ed0:	6122      	str	r2, [r4, #16]
 8000ed2:	f8cd a000 	str.w	sl, [sp]
 8000ed6:	464b      	mov	r3, r9
 8000ed8:	aa03      	add	r2, sp, #12
 8000eda:	4621      	mov	r1, r4
 8000edc:	4640      	mov	r0, r8
 8000ede:	f7ff fee7 	bl	8000cb0 <_printf_common>
 8000ee2:	3001      	adds	r0, #1
 8000ee4:	d14a      	bne.n	8000f7c <_printf_i+0x1f0>
 8000ee6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000eea:	b004      	add	sp, #16
 8000eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ef0:	6823      	ldr	r3, [r4, #0]
 8000ef2:	f043 0320 	orr.w	r3, r3, #32
 8000ef6:	6023      	str	r3, [r4, #0]
 8000ef8:	4832      	ldr	r0, [pc, #200]	@ (8000fc4 <_printf_i+0x238>)
 8000efa:	2778      	movs	r7, #120	@ 0x78
 8000efc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8000f00:	6823      	ldr	r3, [r4, #0]
 8000f02:	6831      	ldr	r1, [r6, #0]
 8000f04:	061f      	lsls	r7, r3, #24
 8000f06:	f851 5b04 	ldr.w	r5, [r1], #4
 8000f0a:	d402      	bmi.n	8000f12 <_printf_i+0x186>
 8000f0c:	065f      	lsls	r7, r3, #25
 8000f0e:	bf48      	it	mi
 8000f10:	b2ad      	uxthmi	r5, r5
 8000f12:	6031      	str	r1, [r6, #0]
 8000f14:	07d9      	lsls	r1, r3, #31
 8000f16:	bf44      	itt	mi
 8000f18:	f043 0320 	orrmi.w	r3, r3, #32
 8000f1c:	6023      	strmi	r3, [r4, #0]
 8000f1e:	b11d      	cbz	r5, 8000f28 <_printf_i+0x19c>
 8000f20:	2310      	movs	r3, #16
 8000f22:	e7ad      	b.n	8000e80 <_printf_i+0xf4>
 8000f24:	4826      	ldr	r0, [pc, #152]	@ (8000fc0 <_printf_i+0x234>)
 8000f26:	e7e9      	b.n	8000efc <_printf_i+0x170>
 8000f28:	6823      	ldr	r3, [r4, #0]
 8000f2a:	f023 0320 	bic.w	r3, r3, #32
 8000f2e:	6023      	str	r3, [r4, #0]
 8000f30:	e7f6      	b.n	8000f20 <_printf_i+0x194>
 8000f32:	4616      	mov	r6, r2
 8000f34:	e7bd      	b.n	8000eb2 <_printf_i+0x126>
 8000f36:	6833      	ldr	r3, [r6, #0]
 8000f38:	6825      	ldr	r5, [r4, #0]
 8000f3a:	6961      	ldr	r1, [r4, #20]
 8000f3c:	1d18      	adds	r0, r3, #4
 8000f3e:	6030      	str	r0, [r6, #0]
 8000f40:	062e      	lsls	r6, r5, #24
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	d501      	bpl.n	8000f4a <_printf_i+0x1be>
 8000f46:	6019      	str	r1, [r3, #0]
 8000f48:	e002      	b.n	8000f50 <_printf_i+0x1c4>
 8000f4a:	0668      	lsls	r0, r5, #25
 8000f4c:	d5fb      	bpl.n	8000f46 <_printf_i+0x1ba>
 8000f4e:	8019      	strh	r1, [r3, #0]
 8000f50:	2300      	movs	r3, #0
 8000f52:	6123      	str	r3, [r4, #16]
 8000f54:	4616      	mov	r6, r2
 8000f56:	e7bc      	b.n	8000ed2 <_printf_i+0x146>
 8000f58:	6833      	ldr	r3, [r6, #0]
 8000f5a:	1d1a      	adds	r2, r3, #4
 8000f5c:	6032      	str	r2, [r6, #0]
 8000f5e:	681e      	ldr	r6, [r3, #0]
 8000f60:	6862      	ldr	r2, [r4, #4]
 8000f62:	2100      	movs	r1, #0
 8000f64:	4630      	mov	r0, r6
 8000f66:	f7ff f933 	bl	80001d0 <memchr>
 8000f6a:	b108      	cbz	r0, 8000f70 <_printf_i+0x1e4>
 8000f6c:	1b80      	subs	r0, r0, r6
 8000f6e:	6060      	str	r0, [r4, #4]
 8000f70:	6863      	ldr	r3, [r4, #4]
 8000f72:	6123      	str	r3, [r4, #16]
 8000f74:	2300      	movs	r3, #0
 8000f76:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000f7a:	e7aa      	b.n	8000ed2 <_printf_i+0x146>
 8000f7c:	6923      	ldr	r3, [r4, #16]
 8000f7e:	4632      	mov	r2, r6
 8000f80:	4649      	mov	r1, r9
 8000f82:	4640      	mov	r0, r8
 8000f84:	47d0      	blx	sl
 8000f86:	3001      	adds	r0, #1
 8000f88:	d0ad      	beq.n	8000ee6 <_printf_i+0x15a>
 8000f8a:	6823      	ldr	r3, [r4, #0]
 8000f8c:	079b      	lsls	r3, r3, #30
 8000f8e:	d413      	bmi.n	8000fb8 <_printf_i+0x22c>
 8000f90:	68e0      	ldr	r0, [r4, #12]
 8000f92:	9b03      	ldr	r3, [sp, #12]
 8000f94:	4298      	cmp	r0, r3
 8000f96:	bfb8      	it	lt
 8000f98:	4618      	movlt	r0, r3
 8000f9a:	e7a6      	b.n	8000eea <_printf_i+0x15e>
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	4632      	mov	r2, r6
 8000fa0:	4649      	mov	r1, r9
 8000fa2:	4640      	mov	r0, r8
 8000fa4:	47d0      	blx	sl
 8000fa6:	3001      	adds	r0, #1
 8000fa8:	d09d      	beq.n	8000ee6 <_printf_i+0x15a>
 8000faa:	3501      	adds	r5, #1
 8000fac:	68e3      	ldr	r3, [r4, #12]
 8000fae:	9903      	ldr	r1, [sp, #12]
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	42ab      	cmp	r3, r5
 8000fb4:	dcf2      	bgt.n	8000f9c <_printf_i+0x210>
 8000fb6:	e7eb      	b.n	8000f90 <_printf_i+0x204>
 8000fb8:	2500      	movs	r5, #0
 8000fba:	f104 0619 	add.w	r6, r4, #25
 8000fbe:	e7f5      	b.n	8000fac <_printf_i+0x220>
 8000fc0:	080010d2 	.word	0x080010d2
 8000fc4:	080010e3 	.word	0x080010e3

08000fc8 <memmove>:
 8000fc8:	4288      	cmp	r0, r1
 8000fca:	b510      	push	{r4, lr}
 8000fcc:	eb01 0402 	add.w	r4, r1, r2
 8000fd0:	d902      	bls.n	8000fd8 <memmove+0x10>
 8000fd2:	4284      	cmp	r4, r0
 8000fd4:	4623      	mov	r3, r4
 8000fd6:	d807      	bhi.n	8000fe8 <memmove+0x20>
 8000fd8:	1e43      	subs	r3, r0, #1
 8000fda:	42a1      	cmp	r1, r4
 8000fdc:	d008      	beq.n	8000ff0 <memmove+0x28>
 8000fde:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000fe2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8000fe6:	e7f8      	b.n	8000fda <memmove+0x12>
 8000fe8:	4402      	add	r2, r0
 8000fea:	4601      	mov	r1, r0
 8000fec:	428a      	cmp	r2, r1
 8000fee:	d100      	bne.n	8000ff2 <memmove+0x2a>
 8000ff0:	bd10      	pop	{r4, pc}
 8000ff2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8000ff6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8000ffa:	e7f7      	b.n	8000fec <memmove+0x24>

08000ffc <_sbrk_r>:
 8000ffc:	b538      	push	{r3, r4, r5, lr}
 8000ffe:	4d06      	ldr	r5, [pc, #24]	@ (8001018 <_sbrk_r+0x1c>)
 8001000:	2300      	movs	r3, #0
 8001002:	4604      	mov	r4, r0
 8001004:	4608      	mov	r0, r1
 8001006:	602b      	str	r3, [r5, #0]
 8001008:	f7ff fa28 	bl	800045c <_sbrk>
 800100c:	1c43      	adds	r3, r0, #1
 800100e:	d102      	bne.n	8001016 <_sbrk_r+0x1a>
 8001010:	682b      	ldr	r3, [r5, #0]
 8001012:	b103      	cbz	r3, 8001016 <_sbrk_r+0x1a>
 8001014:	6023      	str	r3, [r4, #0]
 8001016:	bd38      	pop	{r3, r4, r5, pc}
 8001018:	200001b0 	.word	0x200001b0

0800101c <memcpy>:
 800101c:	440a      	add	r2, r1
 800101e:	4291      	cmp	r1, r2
 8001020:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8001024:	d100      	bne.n	8001028 <memcpy+0xc>
 8001026:	4770      	bx	lr
 8001028:	b510      	push	{r4, lr}
 800102a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800102e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001032:	4291      	cmp	r1, r2
 8001034:	d1f9      	bne.n	800102a <memcpy+0xe>
 8001036:	bd10      	pop	{r4, pc}

08001038 <_realloc_r>:
 8001038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800103c:	4607      	mov	r7, r0
 800103e:	4614      	mov	r4, r2
 8001040:	460d      	mov	r5, r1
 8001042:	b921      	cbnz	r1, 800104e <_realloc_r+0x16>
 8001044:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001048:	4611      	mov	r1, r2
 800104a:	f7ff bc4d 	b.w	80008e8 <_malloc_r>
 800104e:	b92a      	cbnz	r2, 800105c <_realloc_r+0x24>
 8001050:	f7ff fbde 	bl	8000810 <_free_r>
 8001054:	4625      	mov	r5, r4
 8001056:	4628      	mov	r0, r5
 8001058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800105c:	f000 f81a 	bl	8001094 <_malloc_usable_size_r>
 8001060:	4284      	cmp	r4, r0
 8001062:	4606      	mov	r6, r0
 8001064:	d802      	bhi.n	800106c <_realloc_r+0x34>
 8001066:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800106a:	d8f4      	bhi.n	8001056 <_realloc_r+0x1e>
 800106c:	4621      	mov	r1, r4
 800106e:	4638      	mov	r0, r7
 8001070:	f7ff fc3a 	bl	80008e8 <_malloc_r>
 8001074:	4680      	mov	r8, r0
 8001076:	b908      	cbnz	r0, 800107c <_realloc_r+0x44>
 8001078:	4645      	mov	r5, r8
 800107a:	e7ec      	b.n	8001056 <_realloc_r+0x1e>
 800107c:	42b4      	cmp	r4, r6
 800107e:	4622      	mov	r2, r4
 8001080:	4629      	mov	r1, r5
 8001082:	bf28      	it	cs
 8001084:	4632      	movcs	r2, r6
 8001086:	f7ff ffc9 	bl	800101c <memcpy>
 800108a:	4629      	mov	r1, r5
 800108c:	4638      	mov	r0, r7
 800108e:	f7ff fbbf 	bl	8000810 <_free_r>
 8001092:	e7f1      	b.n	8001078 <_realloc_r+0x40>

08001094 <_malloc_usable_size_r>:
 8001094:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001098:	1f18      	subs	r0, r3, #4
 800109a:	2b00      	cmp	r3, #0
 800109c:	bfbc      	itt	lt
 800109e:	580b      	ldrlt	r3, [r1, r0]
 80010a0:	18c0      	addlt	r0, r0, r3
 80010a2:	4770      	bx	lr

080010a4 <_init>:
 80010a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010a6:	bf00      	nop
 80010a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010aa:	bc08      	pop	{r3}
 80010ac:	469e      	mov	lr, r3
 80010ae:	4770      	bx	lr

080010b0 <_fini>:
 80010b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010b2:	bf00      	nop
 80010b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010b6:	bc08      	pop	{r3}
 80010b8:	469e      	mov	lr, r3
 80010ba:	4770      	bx	lr
