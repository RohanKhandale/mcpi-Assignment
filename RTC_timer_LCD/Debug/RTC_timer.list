
RTC_timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001028  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080011b8  080011b8  000021b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001230  08001230  00003054  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08001230  08001230  00002230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001238  08001238  00003054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001238  08001238  00002238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800123c  0800123c  0000223c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  08001240  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003054  2**0
                  CONTENTS
 10 .bss          0000019c  20000054  20000054  00003054  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001f0  200001f0  00003054  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00003054  2**0
                  CONTENTS, READONLY
 13 .debug_info   000015be  00000000  00000000  0000307e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000695  00000000  00000000  0000463c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000138  00000000  00000000  00004cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000d0  00000000  00000000  00004e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001848f  00000000  00000000  00004ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001a8e  00000000  00000000  0001d36f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008bf63  00000000  00000000  0001edfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000aad60  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000085c  00000000  00000000  000aada4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 00000025  00000000  00000000  000ab600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000043  00000000  00000000  000ab625  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000054 	.word	0x20000054
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080011a0 	.word	0x080011a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000058 	.word	0x20000058
 80001cc:	080011a0 	.word	0x080011a0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <DelayMs>:

void SwDelayMs(uint32_t ms);

uint32_t DWT_Init(void);

static inline void DelayMs(volatile uint32_t ms) {
 8000270:	b480      	push	{r7}
 8000272:	b085      	sub	sp, #20
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 8000278:	4b0e      	ldr	r3, [pc, #56]	@ (80002b4 <DelayMs+0x44>)
 800027a:	685b      	ldr	r3, [r3, #4]
 800027c:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 800027e:	4b0e      	ldr	r3, [pc, #56]	@ (80002b8 <DelayMs+0x48>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	4a0e      	ldr	r2, [pc, #56]	@ (80002bc <DelayMs+0x4c>)
 8000284:	fba2 2303 	umull	r2, r3, r2, r3
 8000288:	099b      	lsrs	r3, r3, #6
 800028a:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	68ba      	ldr	r2, [r7, #8]
 8000290:	fb02 f303 	mul.w	r3, r2, r3
 8000294:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 8000296:	bf00      	nop
 8000298:	4b06      	ldr	r3, [pc, #24]	@ (80002b4 <DelayMs+0x44>)
 800029a:	685a      	ldr	r2, [r3, #4]
 800029c:	68fb      	ldr	r3, [r7, #12]
 800029e:	1ad2      	subs	r2, r2, r3
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	429a      	cmp	r2, r3
 80002a4:	d3f8      	bcc.n	8000298 <DelayMs+0x28>
}
 80002a6:	bf00      	nop
 80002a8:	bf00      	nop
 80002aa:	3714      	adds	r7, #20
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bc80      	pop	{r7}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	e0001000 	.word	0xe0001000
 80002b8:	20000000 	.word	0x20000000
 80002bc:	10624dd3 	.word	0x10624dd3

080002c0 <main>:
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

static char str[50];
int main(void)
{
 80002c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002c2:	b08b      	sub	sp, #44	@ 0x2c
 80002c4:	af06      	add	r7, sp, #24
	RtcDate_t dt={.date=30,.month=9,.year=25,.weekday=3};
 80002c6:	4a21      	ldr	r2, [pc, #132]	@ (800034c <main+0x8c>)
 80002c8:	f107 0308 	add.w	r3, r7, #8
 80002cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002d0:	e883 0003 	stmia.w	r3, {r0, r1}
	RtcTime_t tm ={.hr=17,.min=18,.sec=54};
 80002d4:	4a1e      	ldr	r2, [pc, #120]	@ (8000350 <main+0x90>)
 80002d6:	463b      	mov	r3, r7
 80002d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002dc:	6018      	str	r0, [r3, #0]
 80002de:	3304      	adds	r3, #4
 80002e0:	8019      	strh	r1, [r3, #0]
	UartInit(9600);
 80002e2:	f44f 5016 	mov.w	r0, #9600	@ 0x2580
 80002e6:	f000 fa13 	bl	8000710 <UartInit>
	UartPuts("RTC START");
 80002ea:	481a      	ldr	r0, [pc, #104]	@ (8000354 <main+0x94>)
 80002ec:	f000 fa7a 	bl	80007e4 <UartPuts>
	RtcInit(&dt,&tm);
 80002f0:	463a      	mov	r2, r7
 80002f2:	f107 0308 	add.w	r3, r7, #8
 80002f6:	4611      	mov	r1, r2
 80002f8:	4618      	mov	r0, r3
 80002fa:	f000 f86f 	bl	80003dc <RtcInit>

	while(1)
	{
		RtcGetTime(&tm);
 80002fe:	463b      	mov	r3, r7
 8000300:	4618      	mov	r0, r3
 8000302:	f000 f969 	bl	80005d8 <RtcGetTime>
		RtcGetDate(&dt);
 8000306:	f107 0308 	add.w	r3, r7, #8
 800030a:	4618      	mov	r0, r3
 800030c:	f000 f928 	bl	8000560 <RtcGetDate>
		sprintf(str,"%02d-%02d-%02d (%d) %02d:%02d:%02d\r\n",dt.date,dt.month,dt.year,dt.weekday,tm.hr,tm.min,tm.sec);
 8000310:	893b      	ldrh	r3, [r7, #8]
 8000312:	461d      	mov	r5, r3
 8000314:	897b      	ldrh	r3, [r7, #10]
 8000316:	461e      	mov	r6, r3
 8000318:	89bb      	ldrh	r3, [r7, #12]
 800031a:	89fa      	ldrh	r2, [r7, #14]
 800031c:	8839      	ldrh	r1, [r7, #0]
 800031e:	8878      	ldrh	r0, [r7, #2]
 8000320:	88bc      	ldrh	r4, [r7, #4]
 8000322:	9404      	str	r4, [sp, #16]
 8000324:	9003      	str	r0, [sp, #12]
 8000326:	9102      	str	r1, [sp, #8]
 8000328:	9201      	str	r2, [sp, #4]
 800032a:	9300      	str	r3, [sp, #0]
 800032c:	4633      	mov	r3, r6
 800032e:	462a      	mov	r2, r5
 8000330:	4909      	ldr	r1, [pc, #36]	@ (8000358 <main+0x98>)
 8000332:	480a      	ldr	r0, [pc, #40]	@ (800035c <main+0x9c>)
 8000334:	f000 fa9c 	bl	8000870 <siprintf>

		UartPuts(str);
 8000338:	4808      	ldr	r0, [pc, #32]	@ (800035c <main+0x9c>)
 800033a:	f000 fa53 	bl	80007e4 <UartPuts>
		DelayMs(1000);
 800033e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000342:	f7ff ff95 	bl	8000270 <DelayMs>
		RtcGetTime(&tm);
 8000346:	bf00      	nop
 8000348:	e7d9      	b.n	80002fe <main+0x3e>
 800034a:	bf00      	nop
 800034c:	080011ec 	.word	0x080011ec
 8000350:	080011f4 	.word	0x080011f4
 8000354:	080011b8 	.word	0x080011b8
 8000358:	080011c4 	.word	0x080011c4
 800035c:	20000070 	.word	0x20000070

08000360 <Bin2BCD>:
 *  Created on: Sep 30, 2025
 *      Author: vishal
 */

#include "rtc.h"
uint32_t Bin2BCD(uint32_t binVal) {
 8000360:	b480      	push	{r7}
 8000362:	b087      	sub	sp, #28
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
  uint32_t unit = binVal % 10;
 8000368:	687a      	ldr	r2, [r7, #4]
 800036a:	4b0d      	ldr	r3, [pc, #52]	@ (80003a0 <Bin2BCD+0x40>)
 800036c:	fba3 1302 	umull	r1, r3, r3, r2
 8000370:	08d9      	lsrs	r1, r3, #3
 8000372:	460b      	mov	r3, r1
 8000374:	009b      	lsls	r3, r3, #2
 8000376:	440b      	add	r3, r1
 8000378:	005b      	lsls	r3, r3, #1
 800037a:	1ad3      	subs	r3, r2, r3
 800037c:	617b      	str	r3, [r7, #20]
  uint32_t tens = binVal / 10;
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	4a07      	ldr	r2, [pc, #28]	@ (80003a0 <Bin2BCD+0x40>)
 8000382:	fba2 2303 	umull	r2, r3, r2, r3
 8000386:	08db      	lsrs	r3, r3, #3
 8000388:	613b      	str	r3, [r7, #16]
  uint32_t result = (tens << 4) | unit;
 800038a:	693b      	ldr	r3, [r7, #16]
 800038c:	011b      	lsls	r3, r3, #4
 800038e:	697a      	ldr	r2, [r7, #20]
 8000390:	4313      	orrs	r3, r2
 8000392:	60fb      	str	r3, [r7, #12]
  return result;
 8000394:	68fb      	ldr	r3, [r7, #12]
}
 8000396:	4618      	mov	r0, r3
 8000398:	371c      	adds	r7, #28
 800039a:	46bd      	mov	sp, r7
 800039c:	bc80      	pop	{r7}
 800039e:	4770      	bx	lr
 80003a0:	cccccccd 	.word	0xcccccccd

080003a4 <BCD2Bin>:

uint32_t BCD2Bin(uint32_t bcdVal) {
 80003a4:	b480      	push	{r7}
 80003a6:	b087      	sub	sp, #28
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
  uint32_t unit = bcdVal & 0x0F;
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	f003 030f 	and.w	r3, r3, #15
 80003b2:	617b      	str	r3, [r7, #20]
  uint32_t tens = (bcdVal & 0xF0) >> 4;
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	091b      	lsrs	r3, r3, #4
 80003b8:	f003 030f 	and.w	r3, r3, #15
 80003bc:	613b      	str	r3, [r7, #16]
  uint32_t result = (tens * 10) + unit;
 80003be:	693a      	ldr	r2, [r7, #16]
 80003c0:	4613      	mov	r3, r2
 80003c2:	009b      	lsls	r3, r3, #2
 80003c4:	4413      	add	r3, r2
 80003c6:	005b      	lsls	r3, r3, #1
 80003c8:	461a      	mov	r2, r3
 80003ca:	697b      	ldr	r3, [r7, #20]
 80003cc:	4413      	add	r3, r2
 80003ce:	60fb      	str	r3, [r7, #12]
  return result;
 80003d0:	68fb      	ldr	r3, [r7, #12]
}
 80003d2:	4618      	mov	r0, r3
 80003d4:	371c      	adds	r7, #28
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bc80      	pop	{r7}
 80003da:	4770      	bx	lr

080003dc <RtcInit>:

void RtcInit(RtcDate_t *dt, RtcTime_t *tm) {
 80003dc:	b580      	push	{r7, lr}
 80003de:	b082      	sub	sp, #8
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
 80003e4:	6039      	str	r1, [r7, #0]
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80003e6:	4b2e      	ldr	r3, [pc, #184]	@ (80004a0 <RtcInit+0xc4>)
 80003e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003ea:	4a2d      	ldr	r2, [pc, #180]	@ (80004a0 <RtcInit+0xc4>)
 80003ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003f0:	6413      	str	r3, [r2, #64]	@ 0x40
	PWR->CR |= PWR_CR_DBP;
 80003f2:	4b2c      	ldr	r3, [pc, #176]	@ (80004a4 <RtcInit+0xc8>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	4a2b      	ldr	r2, [pc, #172]	@ (80004a4 <RtcInit+0xc8>)
 80003f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80003fc:	6013      	str	r3, [r2, #0]
	RCC->CSR |= RCC_CSR_LSION;
 80003fe:	4b28      	ldr	r3, [pc, #160]	@ (80004a0 <RtcInit+0xc4>)
 8000400:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000402:	4a27      	ldr	r2, [pc, #156]	@ (80004a0 <RtcInit+0xc4>)
 8000404:	f043 0301 	orr.w	r3, r3, #1
 8000408:	6753      	str	r3, [r2, #116]	@ 0x74
	while(!(RCC->CSR & RCC_CSR_LSIRDY));
 800040a:	bf00      	nop
 800040c:	4b24      	ldr	r3, [pc, #144]	@ (80004a0 <RtcInit+0xc4>)
 800040e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000410:	f003 0302 	and.w	r3, r3, #2
 8000414:	2b00      	cmp	r3, #0
 8000416:	d0f9      	beq.n	800040c <RtcInit+0x30>
	RCC->BDCR |= RCC_BDCR_RTCSEL_1;
 8000418:	4b21      	ldr	r3, [pc, #132]	@ (80004a0 <RtcInit+0xc4>)
 800041a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800041c:	4a20      	ldr	r2, [pc, #128]	@ (80004a0 <RtcInit+0xc4>)
 800041e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000422:	6713      	str	r3, [r2, #112]	@ 0x70
	RCC->BDCR &= ~RCC_BDCR_RTCSEL_0;
 8000424:	4b1e      	ldr	r3, [pc, #120]	@ (80004a0 <RtcInit+0xc4>)
 8000426:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000428:	4a1d      	ldr	r2, [pc, #116]	@ (80004a0 <RtcInit+0xc4>)
 800042a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800042e:	6713      	str	r3, [r2, #112]	@ 0x70
	RCC->BDCR |= RCC_BDCR_RTCEN;
 8000430:	4b1b      	ldr	r3, [pc, #108]	@ (80004a0 <RtcInit+0xc4>)
 8000432:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000434:	4a1a      	ldr	r2, [pc, #104]	@ (80004a0 <RtcInit+0xc4>)
 8000436:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800043a:	6713      	str	r3, [r2, #112]	@ 0x70
	RTC->WPR = 0xCA;
 800043c:	4b1a      	ldr	r3, [pc, #104]	@ (80004a8 <RtcInit+0xcc>)
 800043e:	22ca      	movs	r2, #202	@ 0xca
 8000440:	625a      	str	r2, [r3, #36]	@ 0x24
	RTC->WPR = 0x53;
 8000442:	4b19      	ldr	r3, [pc, #100]	@ (80004a8 <RtcInit+0xcc>)
 8000444:	2253      	movs	r2, #83	@ 0x53
 8000446:	625a      	str	r2, [r3, #36]	@ 0x24
	RTC->ISR |= RTC_ISR_INIT;
 8000448:	4b17      	ldr	r3, [pc, #92]	@ (80004a8 <RtcInit+0xcc>)
 800044a:	68db      	ldr	r3, [r3, #12]
 800044c:	4a16      	ldr	r2, [pc, #88]	@ (80004a8 <RtcInit+0xcc>)
 800044e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000452:	60d3      	str	r3, [r2, #12]
	while(!(RTC->ISR & RTC_ISR_INITF));
 8000454:	bf00      	nop
 8000456:	4b14      	ldr	r3, [pc, #80]	@ (80004a8 <RtcInit+0xcc>)
 8000458:	68db      	ldr	r3, [r3, #12]
 800045a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800045e:	2b00      	cmp	r3, #0
 8000460:	d0f9      	beq.n	8000456 <RtcInit+0x7a>
	RTC->PRER = ((RTC_ASYNC_PR - 1) << RTC_PRER_PREDIV_A_Pos) |
 8000462:	4b11      	ldr	r3, [pc, #68]	@ (80004a8 <RtcInit+0xcc>)
 8000464:	4a11      	ldr	r2, [pc, #68]	@ (80004ac <RtcInit+0xd0>)
 8000466:	611a      	str	r2, [r3, #16]
					((RTC_SYNC_PR - 1) << RTC_PRER_PREDIV_S_Pos);
	RtcSetDate(dt);
 8000468:	6878      	ldr	r0, [r7, #4]
 800046a:	f000 f821 	bl	80004b0 <RtcSetDate>
	RtcSetTime(tm);
 800046e:	6838      	ldr	r0, [r7, #0]
 8000470:	f000 f84e 	bl	8000510 <RtcSetTime>
	RTC->CR |= RTC_CR_BYPSHAD;
 8000474:	4b0c      	ldr	r3, [pc, #48]	@ (80004a8 <RtcInit+0xcc>)
 8000476:	689b      	ldr	r3, [r3, #8]
 8000478:	4a0b      	ldr	r2, [pc, #44]	@ (80004a8 <RtcInit+0xcc>)
 800047a:	f043 0320 	orr.w	r3, r3, #32
 800047e:	6093      	str	r3, [r2, #8]
	RTC->ISR &= ~RTC_ISR_INIT;
 8000480:	4b09      	ldr	r3, [pc, #36]	@ (80004a8 <RtcInit+0xcc>)
 8000482:	68db      	ldr	r3, [r3, #12]
 8000484:	4a08      	ldr	r2, [pc, #32]	@ (80004a8 <RtcInit+0xcc>)
 8000486:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800048a:	60d3      	str	r3, [r2, #12]
	PWR->CR &= ~PWR_CR_DBP;
 800048c:	4b05      	ldr	r3, [pc, #20]	@ (80004a4 <RtcInit+0xc8>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4a04      	ldr	r2, [pc, #16]	@ (80004a4 <RtcInit+0xc8>)
 8000492:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000496:	6013      	str	r3, [r2, #0]
}
 8000498:	bf00      	nop
 800049a:	3708      	adds	r7, #8
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	40023800 	.word	0x40023800
 80004a4:	40007000 	.word	0x40007000
 80004a8:	40002800 	.word	0x40002800
 80004ac:	007f00f9 	.word	0x007f00f9

080004b0 <RtcSetDate>:

void RtcSetDate(RtcDate_t *dt) {
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b088      	sub	sp, #32
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
	uint32_t date = Bin2BCD(dt->date);
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	881b      	ldrh	r3, [r3, #0]
 80004bc:	4618      	mov	r0, r3
 80004be:	f7ff ff4f 	bl	8000360 <Bin2BCD>
 80004c2:	61f8      	str	r0, [r7, #28]
	uint32_t month = Bin2BCD(dt->month);
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	885b      	ldrh	r3, [r3, #2]
 80004c8:	4618      	mov	r0, r3
 80004ca:	f7ff ff49 	bl	8000360 <Bin2BCD>
 80004ce:	61b8      	str	r0, [r7, #24]
	uint32_t year = Bin2BCD(dt->year);
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	889b      	ldrh	r3, [r3, #4]
 80004d4:	4618      	mov	r0, r3
 80004d6:	f7ff ff43 	bl	8000360 <Bin2BCD>
 80004da:	6178      	str	r0, [r7, #20]
	uint32_t weekday = Bin2BCD(dt->weekday);
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	88db      	ldrh	r3, [r3, #6]
 80004e0:	4618      	mov	r0, r3
 80004e2:	f7ff ff3d 	bl	8000360 <Bin2BCD>
 80004e6:	6138      	str	r0, [r7, #16]
	uint32_t dr = (date << RTC_DR_DU_Pos) |
			 	 	 (month << RTC_DR_MU_Pos) |
 80004e8:	69bb      	ldr	r3, [r7, #24]
 80004ea:	021a      	lsls	r2, r3, #8
	uint32_t dr = (date << RTC_DR_DU_Pos) |
 80004ec:	69fb      	ldr	r3, [r7, #28]
 80004ee:	431a      	orrs	r2, r3
					 (weekday << RTC_DR_WDU_Pos) |
 80004f0:	693b      	ldr	r3, [r7, #16]
 80004f2:	035b      	lsls	r3, r3, #13
			 	 	 (month << RTC_DR_MU_Pos) |
 80004f4:	431a      	orrs	r2, r3
					 (year << RTC_DR_YU_Pos);
 80004f6:	697b      	ldr	r3, [r7, #20]
 80004f8:	041b      	lsls	r3, r3, #16
	uint32_t dr = (date << RTC_DR_DU_Pos) |
 80004fa:	4313      	orrs	r3, r2
 80004fc:	60fb      	str	r3, [r7, #12]
	RTC->DR = dr;
 80004fe:	4a03      	ldr	r2, [pc, #12]	@ (800050c <RtcSetDate+0x5c>)
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	6053      	str	r3, [r2, #4]
}
 8000504:	bf00      	nop
 8000506:	3720      	adds	r7, #32
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	40002800 	.word	0x40002800

08000510 <RtcSetTime>:

void RtcSetTime(RtcTime_t *tm) {
 8000510:	b580      	push	{r7, lr}
 8000512:	b086      	sub	sp, #24
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
	uint32_t hr = Bin2BCD(tm->hr);
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	881b      	ldrh	r3, [r3, #0]
 800051c:	4618      	mov	r0, r3
 800051e:	f7ff ff1f 	bl	8000360 <Bin2BCD>
 8000522:	6178      	str	r0, [r7, #20]
	uint32_t min = Bin2BCD(tm->min);
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	885b      	ldrh	r3, [r3, #2]
 8000528:	4618      	mov	r0, r3
 800052a:	f7ff ff19 	bl	8000360 <Bin2BCD>
 800052e:	6138      	str	r0, [r7, #16]
	uint32_t sec = Bin2BCD(tm->sec);
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	889b      	ldrh	r3, [r3, #4]
 8000534:	4618      	mov	r0, r3
 8000536:	f7ff ff13 	bl	8000360 <Bin2BCD>
 800053a:	60f8      	str	r0, [r7, #12]
	uint32_t tr = (sec << RTC_TR_SU_Pos) |
					(min << RTC_TR_MNU_Pos) |
 800053c:	693b      	ldr	r3, [r7, #16]
 800053e:	021a      	lsls	r2, r3, #8
	uint32_t tr = (sec << RTC_TR_SU_Pos) |
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	431a      	orrs	r2, r3
					(hr << RTC_TR_HU_Pos);
 8000544:	697b      	ldr	r3, [r7, #20]
 8000546:	041b      	lsls	r3, r3, #16
	uint32_t tr = (sec << RTC_TR_SU_Pos) |
 8000548:	4313      	orrs	r3, r2
 800054a:	60bb      	str	r3, [r7, #8]
	RTC->TR = tr;
 800054c:	4a03      	ldr	r2, [pc, #12]	@ (800055c <RtcSetTime+0x4c>)
 800054e:	68bb      	ldr	r3, [r7, #8]
 8000550:	6013      	str	r3, [r2, #0]
}
 8000552:	bf00      	nop
 8000554:	3718      	adds	r7, #24
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	40002800 	.word	0x40002800

08000560 <RtcGetDate>:

void RtcGetDate(RtcDate_t *dt) {
 8000560:	b580      	push	{r7, lr}
 8000562:	b088      	sub	sp, #32
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
	uint32_t dr = RTC->DR;
 8000568:	4b1a      	ldr	r3, [pc, #104]	@ (80005d4 <RtcGetDate+0x74>)
 800056a:	685b      	ldr	r3, [r3, #4]
 800056c:	61fb      	str	r3, [r7, #28]
	uint32_t date = (dr & (RTC_DR_DT_Msk | RTC_DR_DU_Msk)) >> RTC_DR_DU_Pos;
 800056e:	69fb      	ldr	r3, [r7, #28]
 8000570:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000574:	61bb      	str	r3, [r7, #24]
	dt->date = BCD2Bin(date);
 8000576:	69b8      	ldr	r0, [r7, #24]
 8000578:	f7ff ff14 	bl	80003a4 <BCD2Bin>
 800057c:	4603      	mov	r3, r0
 800057e:	b29a      	uxth	r2, r3
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	801a      	strh	r2, [r3, #0]
	uint32_t month = (dr & (RTC_DR_MT_Msk | RTC_DR_MU_Msk)) >> RTC_DR_MU_Pos;
 8000584:	69fb      	ldr	r3, [r7, #28]
 8000586:	0a1b      	lsrs	r3, r3, #8
 8000588:	f003 031f 	and.w	r3, r3, #31
 800058c:	617b      	str	r3, [r7, #20]
	dt->month = BCD2Bin(month);
 800058e:	6978      	ldr	r0, [r7, #20]
 8000590:	f7ff ff08 	bl	80003a4 <BCD2Bin>
 8000594:	4603      	mov	r3, r0
 8000596:	b29a      	uxth	r2, r3
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	805a      	strh	r2, [r3, #2]
	uint32_t weekday = (dr & (RTC_DR_WDU_Msk)) >> RTC_DR_WDU_Pos;
 800059c:	69fb      	ldr	r3, [r7, #28]
 800059e:	0b5b      	lsrs	r3, r3, #13
 80005a0:	f003 0307 	and.w	r3, r3, #7
 80005a4:	613b      	str	r3, [r7, #16]
	dt->weekday = BCD2Bin(weekday);
 80005a6:	6938      	ldr	r0, [r7, #16]
 80005a8:	f7ff fefc 	bl	80003a4 <BCD2Bin>
 80005ac:	4603      	mov	r3, r0
 80005ae:	b29a      	uxth	r2, r3
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	80da      	strh	r2, [r3, #6]
	uint32_t year = (dr & (RTC_DR_YT_Msk | RTC_DR_YU_Msk)) >> RTC_DR_YU_Pos;
 80005b4:	69fb      	ldr	r3, [r7, #28]
 80005b6:	0c1b      	lsrs	r3, r3, #16
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	60fb      	str	r3, [r7, #12]
	dt->year = BCD2Bin(year);
 80005bc:	68f8      	ldr	r0, [r7, #12]
 80005be:	f7ff fef1 	bl	80003a4 <BCD2Bin>
 80005c2:	4603      	mov	r3, r0
 80005c4:	b29a      	uxth	r2, r3
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	809a      	strh	r2, [r3, #4]
}
 80005ca:	bf00      	nop
 80005cc:	3720      	adds	r7, #32
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40002800 	.word	0x40002800

080005d8 <RtcGetTime>:

void RtcGetTime(RtcTime_t *tm) {
 80005d8:	b580      	push	{r7, lr}
 80005da:	b086      	sub	sp, #24
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
	uint32_t tr = RTC->TR;
 80005e0:	4b14      	ldr	r3, [pc, #80]	@ (8000634 <RtcGetTime+0x5c>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	617b      	str	r3, [r7, #20]
	uint32_t sec = (tr & (RTC_TR_ST_Msk | RTC_TR_SU_Msk)) >> RTC_TR_SU_Pos;
 80005e6:	697b      	ldr	r3, [r7, #20]
 80005e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80005ec:	613b      	str	r3, [r7, #16]
	tm->sec = BCD2Bin(sec);
 80005ee:	6938      	ldr	r0, [r7, #16]
 80005f0:	f7ff fed8 	bl	80003a4 <BCD2Bin>
 80005f4:	4603      	mov	r3, r0
 80005f6:	b29a      	uxth	r2, r3
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	809a      	strh	r2, [r3, #4]
	uint32_t min= (tr & (RTC_TR_MNT_Msk | RTC_TR_MNU_Msk)) >> RTC_TR_MNU_Pos;
 80005fc:	697b      	ldr	r3, [r7, #20]
 80005fe:	0a1b      	lsrs	r3, r3, #8
 8000600:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000604:	60fb      	str	r3, [r7, #12]
	tm->min = BCD2Bin(min);
 8000606:	68f8      	ldr	r0, [r7, #12]
 8000608:	f7ff fecc 	bl	80003a4 <BCD2Bin>
 800060c:	4603      	mov	r3, r0
 800060e:	b29a      	uxth	r2, r3
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	805a      	strh	r2, [r3, #2]
	uint32_t hr = (tr & (RTC_TR_HT_Msk | RTC_TR_HU_Msk)) >> RTC_TR_HU_Pos;
 8000614:	697b      	ldr	r3, [r7, #20]
 8000616:	0c1b      	lsrs	r3, r3, #16
 8000618:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800061c:	60bb      	str	r3, [r7, #8]
	tm->hr = BCD2Bin(hr);
 800061e:	68b8      	ldr	r0, [r7, #8]
 8000620:	f7ff fec0 	bl	80003a4 <BCD2Bin>
 8000624:	4603      	mov	r3, r0
 8000626:	b29a      	uxth	r2, r3
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	801a      	strh	r2, [r3, #0]
}
 800062c:	bf00      	nop
 800062e:	3718      	adds	r7, #24
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	40002800 	.word	0x40002800

08000638 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b086      	sub	sp, #24
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000640:	4a14      	ldr	r2, [pc, #80]	@ (8000694 <_sbrk+0x5c>)
 8000642:	4b15      	ldr	r3, [pc, #84]	@ (8000698 <_sbrk+0x60>)
 8000644:	1ad3      	subs	r3, r2, r3
 8000646:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000648:	697b      	ldr	r3, [r7, #20]
 800064a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800064c:	4b13      	ldr	r3, [pc, #76]	@ (800069c <_sbrk+0x64>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d102      	bne.n	800065a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000654:	4b11      	ldr	r3, [pc, #68]	@ (800069c <_sbrk+0x64>)
 8000656:	4a12      	ldr	r2, [pc, #72]	@ (80006a0 <_sbrk+0x68>)
 8000658:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800065a:	4b10      	ldr	r3, [pc, #64]	@ (800069c <_sbrk+0x64>)
 800065c:	681a      	ldr	r2, [r3, #0]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	4413      	add	r3, r2
 8000662:	693a      	ldr	r2, [r7, #16]
 8000664:	429a      	cmp	r2, r3
 8000666:	d207      	bcs.n	8000678 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000668:	f000 f924 	bl	80008b4 <__errno>
 800066c:	4603      	mov	r3, r0
 800066e:	220c      	movs	r2, #12
 8000670:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000672:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000676:	e009      	b.n	800068c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000678:	4b08      	ldr	r3, [pc, #32]	@ (800069c <_sbrk+0x64>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800067e:	4b07      	ldr	r3, [pc, #28]	@ (800069c <_sbrk+0x64>)
 8000680:	681a      	ldr	r2, [r3, #0]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	4413      	add	r3, r2
 8000686:	4a05      	ldr	r2, [pc, #20]	@ (800069c <_sbrk+0x64>)
 8000688:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800068a:	68fb      	ldr	r3, [r7, #12]
}
 800068c:	4618      	mov	r0, r3
 800068e:	3718      	adds	r7, #24
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20020000 	.word	0x20020000
 8000698:	00000400 	.word	0x00000400
 800069c:	200000a4 	.word	0x200000a4
 80006a0:	200001f0 	.word	0x200001f0

080006a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */

  DWT_Init();
 80006a8:	f000 f802 	bl	80006b0 <DWT_Init>
}
 80006ac:	bf00      	nop
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80006b4:	4b14      	ldr	r3, [pc, #80]	@ (8000708 <DWT_Init+0x58>)
 80006b6:	68db      	ldr	r3, [r3, #12]
 80006b8:	4a13      	ldr	r2, [pc, #76]	@ (8000708 <DWT_Init+0x58>)
 80006ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80006be:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80006c0:	4b11      	ldr	r3, [pc, #68]	@ (8000708 <DWT_Init+0x58>)
 80006c2:	68db      	ldr	r3, [r3, #12]
 80006c4:	4a10      	ldr	r2, [pc, #64]	@ (8000708 <DWT_Init+0x58>)
 80006c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80006ca:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80006cc:	4b0f      	ldr	r3, [pc, #60]	@ (800070c <DWT_Init+0x5c>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a0e      	ldr	r2, [pc, #56]	@ (800070c <DWT_Init+0x5c>)
 80006d2:	f023 0301 	bic.w	r3, r3, #1
 80006d6:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80006d8:	4b0c      	ldr	r3, [pc, #48]	@ (800070c <DWT_Init+0x5c>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a0b      	ldr	r2, [pc, #44]	@ (800070c <DWT_Init+0x5c>)
 80006de:	f043 0301 	orr.w	r3, r3, #1
 80006e2:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 80006e4:	4b09      	ldr	r3, [pc, #36]	@ (800070c <DWT_Init+0x5c>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 80006ea:	bf00      	nop
    __ASM volatile ("NOP");
 80006ec:	bf00      	nop
    __ASM volatile ("NOP");
 80006ee:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 80006f0:	4b06      	ldr	r3, [pc, #24]	@ (800070c <DWT_Init+0x5c>)
 80006f2:	685b      	ldr	r3, [r3, #4]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	bf0c      	ite	eq
 80006f8:	2301      	moveq	r3, #1
 80006fa:	2300      	movne	r3, #0
 80006fc:	b2db      	uxtb	r3, r3
}
 80006fe:	4618      	mov	r0, r3
 8000700:	46bd      	mov	sp, r7
 8000702:	bc80      	pop	{r7}
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	e000edf0 	.word	0xe000edf0
 800070c:	e0001000 	.word	0xe0001000

08000710 <UartInit>:
 *      Author: admin
 */

#include "uart.h"

void UartInit(uint32_t baud) {
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
	/* GPIO config */
	// enable gpio clock
	//RCC->AHB1ENR |= BV(RCC_AHB1ENR_GPIOAEN_Pos);
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000718:	4b24      	ldr	r3, [pc, #144]	@ (80007ac <UartInit+0x9c>)
 800071a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071c:	4a23      	ldr	r2, [pc, #140]	@ (80007ac <UartInit+0x9c>)
 800071e:	f043 0301 	orr.w	r3, r3, #1
 8000722:	6313      	str	r3, [r2, #48]	@ 0x30
	// set gpio - no pull up & no pull down
	GPIOA->PUPDR &= ~(BV(2*2+1) | BV(2*2) | BV(2*3+1) | BV(2*3));
 8000724:	4b22      	ldr	r3, [pc, #136]	@ (80007b0 <UartInit+0xa0>)
 8000726:	68db      	ldr	r3, [r3, #12]
 8000728:	4a21      	ldr	r2, [pc, #132]	@ (80007b0 <UartInit+0xa0>)
 800072a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800072e:	60d3      	str	r3, [r2, #12]
	// set gpio (PA2, PA3) mode as alt fn = 10
	GPIOA->MODER |= BV(2*2+1) | BV(2*3+1);
 8000730:	4b1f      	ldr	r3, [pc, #124]	@ (80007b0 <UartInit+0xa0>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a1e      	ldr	r2, [pc, #120]	@ (80007b0 <UartInit+0xa0>)
 8000736:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 800073a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(BV(2*2) | BV(2*3));
 800073c:	4b1c      	ldr	r3, [pc, #112]	@ (80007b0 <UartInit+0xa0>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a1b      	ldr	r2, [pc, #108]	@ (80007b0 <UartInit+0xa0>)
 8000742:	f023 0350 	bic.w	r3, r3, #80	@ 0x50
 8000746:	6013      	str	r3, [r2, #0]
	// set gpio (PA2, PA3) pin alt fn as uart (AF7) -- AFRL = AFR[0], AFRH = AFR[1]
	GPIOA->AFR[0] = (7 << (2*4)) | (7 << (3*4));
 8000748:	4b19      	ldr	r3, [pc, #100]	@ (80007b0 <UartInit+0xa0>)
 800074a:	f44f 42ee 	mov.w	r2, #30464	@ 0x7700
 800074e:	621a      	str	r2, [r3, #32]
	/* UART config */
	// enable UART2 clock
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8000750:	4b16      	ldr	r3, [pc, #88]	@ (80007ac <UartInit+0x9c>)
 8000752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000754:	4a15      	ldr	r2, [pc, #84]	@ (80007ac <UartInit+0x9c>)
 8000756:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800075a:	6413      	str	r3, [r2, #64]	@ 0x40
	// UART2 config (8N1) = 8-bit data transfer=0, disable parity=0, tx en=1, rx en=1
	USART2->CR1 = USART_CR1_TE | USART_CR1_RE;
 800075c:	4b15      	ldr	r3, [pc, #84]	@ (80007b4 <UartInit+0xa4>)
 800075e:	220c      	movs	r2, #12
 8000760:	60da      	str	r2, [r3, #12]
	// baud rate setting
	if(baud == 9600)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	f5b3 5f16 	cmp.w	r3, #9600	@ 0x2580
 8000768:	d104      	bne.n	8000774 <UartInit+0x64>
		USART2->BRR = 0x0683;
 800076a:	4b12      	ldr	r3, [pc, #72]	@ (80007b4 <UartInit+0xa4>)
 800076c:	f240 6283 	movw	r2, #1667	@ 0x683
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	e00f      	b.n	8000794 <UartInit+0x84>
	else if(baud == 38400)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	f5b3 4f16 	cmp.w	r3, #38400	@ 0x9600
 800077a:	d104      	bne.n	8000786 <UartInit+0x76>
		USART2->BRR = 0x01A1;
 800077c:	4b0d      	ldr	r3, [pc, #52]	@ (80007b4 <UartInit+0xa4>)
 800077e:	f240 12a1 	movw	r2, #417	@ 0x1a1
 8000782:	609a      	str	r2, [r3, #8]
 8000784:	e006      	b.n	8000794 <UartInit+0x84>
	else if(baud == 115200)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 800078c:	d102      	bne.n	8000794 <UartInit+0x84>
		USART2->BRR = 0x008B;
 800078e:	4b09      	ldr	r3, [pc, #36]	@ (80007b4 <UartInit+0xa4>)
 8000790:	228b      	movs	r2, #139	@ 0x8b
 8000792:	609a      	str	r2, [r3, #8]
	// enable uart=1
	USART2->CR1 |= USART_CR1_UE;
 8000794:	4b07      	ldr	r3, [pc, #28]	@ (80007b4 <UartInit+0xa4>)
 8000796:	68db      	ldr	r3, [r3, #12]
 8000798:	4a06      	ldr	r2, [pc, #24]	@ (80007b4 <UartInit+0xa4>)
 800079a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800079e:	60d3      	str	r3, [r2, #12]
}
 80007a0:	bf00      	nop
 80007a2:	370c      	adds	r7, #12
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bc80      	pop	{r7}
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	40023800 	.word	0x40023800
 80007b0:	40020000 	.word	0x40020000
 80007b4:	40004400 	.word	0x40004400

080007b8 <UartPutch>:

void UartPutch(int ch) {
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
	// write char in TDR
	USART2->DR = ch;
 80007c0:	4a07      	ldr	r2, [pc, #28]	@ (80007e0 <UartPutch+0x28>)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	6053      	str	r3, [r2, #4]
	// wait until Tx is done (until Tx regr is not empty)
	while((USART2->SR & USART_SR_TXE) == 0)
 80007c6:	bf00      	nop
 80007c8:	4b05      	ldr	r3, [pc, #20]	@ (80007e0 <UartPutch+0x28>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d0f9      	beq.n	80007c8 <UartPutch+0x10>
		;
}
 80007d4:	bf00      	nop
 80007d6:	bf00      	nop
 80007d8:	370c      	adds	r7, #12
 80007da:	46bd      	mov	sp, r7
 80007dc:	bc80      	pop	{r7}
 80007de:	4770      	bx	lr
 80007e0:	40004400 	.word	0x40004400

080007e4 <UartPuts>:
		;
	// read char from RDR
	return USART2->DR;
}

void UartPuts(char *str) {
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
	for(int i=0; str[i] != '\0'; i++)
 80007ec:	2300      	movs	r3, #0
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	e009      	b.n	8000806 <UartPuts+0x22>
		UartPutch(str[i]);
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	687a      	ldr	r2, [r7, #4]
 80007f6:	4413      	add	r3, r2
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	4618      	mov	r0, r3
 80007fc:	f7ff ffdc 	bl	80007b8 <UartPutch>
	for(int i=0; str[i] != '\0'; i++)
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	3301      	adds	r3, #1
 8000804:	60fb      	str	r3, [r7, #12]
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	687a      	ldr	r2, [r7, #4]
 800080a:	4413      	add	r3, r2
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d1ef      	bne.n	80007f2 <UartPuts+0xe>
}
 8000812:	bf00      	nop
 8000814:	bf00      	nop
 8000816:	3710      	adds	r7, #16
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}

0800081c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800081c:	480d      	ldr	r0, [pc, #52]	@ (8000854 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800081e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000820:	f7ff ff40 	bl	80006a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000824:	480c      	ldr	r0, [pc, #48]	@ (8000858 <LoopForever+0x6>)
  ldr r1, =_edata
 8000826:	490d      	ldr	r1, [pc, #52]	@ (800085c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000828:	4a0d      	ldr	r2, [pc, #52]	@ (8000860 <LoopForever+0xe>)
  movs r3, #0
 800082a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800082c:	e002      	b.n	8000834 <LoopCopyDataInit>

0800082e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800082e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000830:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000832:	3304      	adds	r3, #4

08000834 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000834:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000836:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000838:	d3f9      	bcc.n	800082e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800083a:	4a0a      	ldr	r2, [pc, #40]	@ (8000864 <LoopForever+0x12>)
  ldr r4, =_ebss
 800083c:	4c0a      	ldr	r4, [pc, #40]	@ (8000868 <LoopForever+0x16>)
  movs r3, #0
 800083e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000840:	e001      	b.n	8000846 <LoopFillZerobss>

08000842 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000842:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000844:	3204      	adds	r2, #4

08000846 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000846:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000848:	d3fb      	bcc.n	8000842 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800084a:	f000 f839 	bl	80008c0 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 800084e:	f7ff fd37 	bl	80002c0 <main>

08000852 <LoopForever>:

LoopForever:
  b LoopForever
 8000852:	e7fe      	b.n	8000852 <LoopForever>
  ldr   r0, =_estack
 8000854:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000858:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800085c:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8000860:	08001240 	.word	0x08001240
  ldr r2, =_sbss
 8000864:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8000868:	200001f0 	.word	0x200001f0

0800086c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800086c:	e7fe      	b.n	800086c <ADC_IRQHandler>
	...

08000870 <siprintf>:
 8000870:	b40e      	push	{r1, r2, r3}
 8000872:	b510      	push	{r4, lr}
 8000874:	b09d      	sub	sp, #116	@ 0x74
 8000876:	ab1f      	add	r3, sp, #124	@ 0x7c
 8000878:	9002      	str	r0, [sp, #8]
 800087a:	9006      	str	r0, [sp, #24]
 800087c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8000880:	480a      	ldr	r0, [pc, #40]	@ (80008ac <siprintf+0x3c>)
 8000882:	9107      	str	r1, [sp, #28]
 8000884:	9104      	str	r1, [sp, #16]
 8000886:	490a      	ldr	r1, [pc, #40]	@ (80008b0 <siprintf+0x40>)
 8000888:	f853 2b04 	ldr.w	r2, [r3], #4
 800088c:	9105      	str	r1, [sp, #20]
 800088e:	2400      	movs	r4, #0
 8000890:	a902      	add	r1, sp, #8
 8000892:	6800      	ldr	r0, [r0, #0]
 8000894:	9301      	str	r3, [sp, #4]
 8000896:	941b      	str	r4, [sp, #108]	@ 0x6c
 8000898:	f000 f98c 	bl	8000bb4 <_svfiprintf_r>
 800089c:	9b02      	ldr	r3, [sp, #8]
 800089e:	701c      	strb	r4, [r3, #0]
 80008a0:	b01d      	add	sp, #116	@ 0x74
 80008a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80008a6:	b003      	add	sp, #12
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	20000004 	.word	0x20000004
 80008b0:	ffff0208 	.word	0xffff0208

080008b4 <__errno>:
 80008b4:	4b01      	ldr	r3, [pc, #4]	@ (80008bc <__errno+0x8>)
 80008b6:	6818      	ldr	r0, [r3, #0]
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	20000004 	.word	0x20000004

080008c0 <__libc_init_array>:
 80008c0:	b570      	push	{r4, r5, r6, lr}
 80008c2:	4d0d      	ldr	r5, [pc, #52]	@ (80008f8 <__libc_init_array+0x38>)
 80008c4:	4c0d      	ldr	r4, [pc, #52]	@ (80008fc <__libc_init_array+0x3c>)
 80008c6:	1b64      	subs	r4, r4, r5
 80008c8:	10a4      	asrs	r4, r4, #2
 80008ca:	2600      	movs	r6, #0
 80008cc:	42a6      	cmp	r6, r4
 80008ce:	d109      	bne.n	80008e4 <__libc_init_array+0x24>
 80008d0:	4d0b      	ldr	r5, [pc, #44]	@ (8000900 <__libc_init_array+0x40>)
 80008d2:	4c0c      	ldr	r4, [pc, #48]	@ (8000904 <__libc_init_array+0x44>)
 80008d4:	f000 fc64 	bl	80011a0 <_init>
 80008d8:	1b64      	subs	r4, r4, r5
 80008da:	10a4      	asrs	r4, r4, #2
 80008dc:	2600      	movs	r6, #0
 80008de:	42a6      	cmp	r6, r4
 80008e0:	d105      	bne.n	80008ee <__libc_init_array+0x2e>
 80008e2:	bd70      	pop	{r4, r5, r6, pc}
 80008e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80008e8:	4798      	blx	r3
 80008ea:	3601      	adds	r6, #1
 80008ec:	e7ee      	b.n	80008cc <__libc_init_array+0xc>
 80008ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80008f2:	4798      	blx	r3
 80008f4:	3601      	adds	r6, #1
 80008f6:	e7f2      	b.n	80008de <__libc_init_array+0x1e>
 80008f8:	08001238 	.word	0x08001238
 80008fc:	08001238 	.word	0x08001238
 8000900:	08001238 	.word	0x08001238
 8000904:	0800123c 	.word	0x0800123c

08000908 <__retarget_lock_acquire_recursive>:
 8000908:	4770      	bx	lr

0800090a <__retarget_lock_release_recursive>:
 800090a:	4770      	bx	lr

0800090c <_free_r>:
 800090c:	b538      	push	{r3, r4, r5, lr}
 800090e:	4605      	mov	r5, r0
 8000910:	2900      	cmp	r1, #0
 8000912:	d041      	beq.n	8000998 <_free_r+0x8c>
 8000914:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000918:	1f0c      	subs	r4, r1, #4
 800091a:	2b00      	cmp	r3, #0
 800091c:	bfb8      	it	lt
 800091e:	18e4      	addlt	r4, r4, r3
 8000920:	f000 f8e0 	bl	8000ae4 <__malloc_lock>
 8000924:	4a1d      	ldr	r2, [pc, #116]	@ (800099c <_free_r+0x90>)
 8000926:	6813      	ldr	r3, [r2, #0]
 8000928:	b933      	cbnz	r3, 8000938 <_free_r+0x2c>
 800092a:	6063      	str	r3, [r4, #4]
 800092c:	6014      	str	r4, [r2, #0]
 800092e:	4628      	mov	r0, r5
 8000930:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000934:	f000 b8dc 	b.w	8000af0 <__malloc_unlock>
 8000938:	42a3      	cmp	r3, r4
 800093a:	d908      	bls.n	800094e <_free_r+0x42>
 800093c:	6820      	ldr	r0, [r4, #0]
 800093e:	1821      	adds	r1, r4, r0
 8000940:	428b      	cmp	r3, r1
 8000942:	bf01      	itttt	eq
 8000944:	6819      	ldreq	r1, [r3, #0]
 8000946:	685b      	ldreq	r3, [r3, #4]
 8000948:	1809      	addeq	r1, r1, r0
 800094a:	6021      	streq	r1, [r4, #0]
 800094c:	e7ed      	b.n	800092a <_free_r+0x1e>
 800094e:	461a      	mov	r2, r3
 8000950:	685b      	ldr	r3, [r3, #4]
 8000952:	b10b      	cbz	r3, 8000958 <_free_r+0x4c>
 8000954:	42a3      	cmp	r3, r4
 8000956:	d9fa      	bls.n	800094e <_free_r+0x42>
 8000958:	6811      	ldr	r1, [r2, #0]
 800095a:	1850      	adds	r0, r2, r1
 800095c:	42a0      	cmp	r0, r4
 800095e:	d10b      	bne.n	8000978 <_free_r+0x6c>
 8000960:	6820      	ldr	r0, [r4, #0]
 8000962:	4401      	add	r1, r0
 8000964:	1850      	adds	r0, r2, r1
 8000966:	4283      	cmp	r3, r0
 8000968:	6011      	str	r1, [r2, #0]
 800096a:	d1e0      	bne.n	800092e <_free_r+0x22>
 800096c:	6818      	ldr	r0, [r3, #0]
 800096e:	685b      	ldr	r3, [r3, #4]
 8000970:	6053      	str	r3, [r2, #4]
 8000972:	4408      	add	r0, r1
 8000974:	6010      	str	r0, [r2, #0]
 8000976:	e7da      	b.n	800092e <_free_r+0x22>
 8000978:	d902      	bls.n	8000980 <_free_r+0x74>
 800097a:	230c      	movs	r3, #12
 800097c:	602b      	str	r3, [r5, #0]
 800097e:	e7d6      	b.n	800092e <_free_r+0x22>
 8000980:	6820      	ldr	r0, [r4, #0]
 8000982:	1821      	adds	r1, r4, r0
 8000984:	428b      	cmp	r3, r1
 8000986:	bf04      	itt	eq
 8000988:	6819      	ldreq	r1, [r3, #0]
 800098a:	685b      	ldreq	r3, [r3, #4]
 800098c:	6063      	str	r3, [r4, #4]
 800098e:	bf04      	itt	eq
 8000990:	1809      	addeq	r1, r1, r0
 8000992:	6021      	streq	r1, [r4, #0]
 8000994:	6054      	str	r4, [r2, #4]
 8000996:	e7ca      	b.n	800092e <_free_r+0x22>
 8000998:	bd38      	pop	{r3, r4, r5, pc}
 800099a:	bf00      	nop
 800099c:	200001ec 	.word	0x200001ec

080009a0 <sbrk_aligned>:
 80009a0:	b570      	push	{r4, r5, r6, lr}
 80009a2:	4e0f      	ldr	r6, [pc, #60]	@ (80009e0 <sbrk_aligned+0x40>)
 80009a4:	460c      	mov	r4, r1
 80009a6:	6831      	ldr	r1, [r6, #0]
 80009a8:	4605      	mov	r5, r0
 80009aa:	b911      	cbnz	r1, 80009b2 <sbrk_aligned+0x12>
 80009ac:	f000 fba4 	bl	80010f8 <_sbrk_r>
 80009b0:	6030      	str	r0, [r6, #0]
 80009b2:	4621      	mov	r1, r4
 80009b4:	4628      	mov	r0, r5
 80009b6:	f000 fb9f 	bl	80010f8 <_sbrk_r>
 80009ba:	1c43      	adds	r3, r0, #1
 80009bc:	d103      	bne.n	80009c6 <sbrk_aligned+0x26>
 80009be:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80009c2:	4620      	mov	r0, r4
 80009c4:	bd70      	pop	{r4, r5, r6, pc}
 80009c6:	1cc4      	adds	r4, r0, #3
 80009c8:	f024 0403 	bic.w	r4, r4, #3
 80009cc:	42a0      	cmp	r0, r4
 80009ce:	d0f8      	beq.n	80009c2 <sbrk_aligned+0x22>
 80009d0:	1a21      	subs	r1, r4, r0
 80009d2:	4628      	mov	r0, r5
 80009d4:	f000 fb90 	bl	80010f8 <_sbrk_r>
 80009d8:	3001      	adds	r0, #1
 80009da:	d1f2      	bne.n	80009c2 <sbrk_aligned+0x22>
 80009dc:	e7ef      	b.n	80009be <sbrk_aligned+0x1e>
 80009de:	bf00      	nop
 80009e0:	200001e8 	.word	0x200001e8

080009e4 <_malloc_r>:
 80009e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80009e8:	1ccd      	adds	r5, r1, #3
 80009ea:	f025 0503 	bic.w	r5, r5, #3
 80009ee:	3508      	adds	r5, #8
 80009f0:	2d0c      	cmp	r5, #12
 80009f2:	bf38      	it	cc
 80009f4:	250c      	movcc	r5, #12
 80009f6:	2d00      	cmp	r5, #0
 80009f8:	4606      	mov	r6, r0
 80009fa:	db01      	blt.n	8000a00 <_malloc_r+0x1c>
 80009fc:	42a9      	cmp	r1, r5
 80009fe:	d904      	bls.n	8000a0a <_malloc_r+0x26>
 8000a00:	230c      	movs	r3, #12
 8000a02:	6033      	str	r3, [r6, #0]
 8000a04:	2000      	movs	r0, #0
 8000a06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000a0a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000ae0 <_malloc_r+0xfc>
 8000a0e:	f000 f869 	bl	8000ae4 <__malloc_lock>
 8000a12:	f8d8 3000 	ldr.w	r3, [r8]
 8000a16:	461c      	mov	r4, r3
 8000a18:	bb44      	cbnz	r4, 8000a6c <_malloc_r+0x88>
 8000a1a:	4629      	mov	r1, r5
 8000a1c:	4630      	mov	r0, r6
 8000a1e:	f7ff ffbf 	bl	80009a0 <sbrk_aligned>
 8000a22:	1c43      	adds	r3, r0, #1
 8000a24:	4604      	mov	r4, r0
 8000a26:	d158      	bne.n	8000ada <_malloc_r+0xf6>
 8000a28:	f8d8 4000 	ldr.w	r4, [r8]
 8000a2c:	4627      	mov	r7, r4
 8000a2e:	2f00      	cmp	r7, #0
 8000a30:	d143      	bne.n	8000aba <_malloc_r+0xd6>
 8000a32:	2c00      	cmp	r4, #0
 8000a34:	d04b      	beq.n	8000ace <_malloc_r+0xea>
 8000a36:	6823      	ldr	r3, [r4, #0]
 8000a38:	4639      	mov	r1, r7
 8000a3a:	4630      	mov	r0, r6
 8000a3c:	eb04 0903 	add.w	r9, r4, r3
 8000a40:	f000 fb5a 	bl	80010f8 <_sbrk_r>
 8000a44:	4581      	cmp	r9, r0
 8000a46:	d142      	bne.n	8000ace <_malloc_r+0xea>
 8000a48:	6821      	ldr	r1, [r4, #0]
 8000a4a:	1a6d      	subs	r5, r5, r1
 8000a4c:	4629      	mov	r1, r5
 8000a4e:	4630      	mov	r0, r6
 8000a50:	f7ff ffa6 	bl	80009a0 <sbrk_aligned>
 8000a54:	3001      	adds	r0, #1
 8000a56:	d03a      	beq.n	8000ace <_malloc_r+0xea>
 8000a58:	6823      	ldr	r3, [r4, #0]
 8000a5a:	442b      	add	r3, r5
 8000a5c:	6023      	str	r3, [r4, #0]
 8000a5e:	f8d8 3000 	ldr.w	r3, [r8]
 8000a62:	685a      	ldr	r2, [r3, #4]
 8000a64:	bb62      	cbnz	r2, 8000ac0 <_malloc_r+0xdc>
 8000a66:	f8c8 7000 	str.w	r7, [r8]
 8000a6a:	e00f      	b.n	8000a8c <_malloc_r+0xa8>
 8000a6c:	6822      	ldr	r2, [r4, #0]
 8000a6e:	1b52      	subs	r2, r2, r5
 8000a70:	d420      	bmi.n	8000ab4 <_malloc_r+0xd0>
 8000a72:	2a0b      	cmp	r2, #11
 8000a74:	d917      	bls.n	8000aa6 <_malloc_r+0xc2>
 8000a76:	1961      	adds	r1, r4, r5
 8000a78:	42a3      	cmp	r3, r4
 8000a7a:	6025      	str	r5, [r4, #0]
 8000a7c:	bf18      	it	ne
 8000a7e:	6059      	strne	r1, [r3, #4]
 8000a80:	6863      	ldr	r3, [r4, #4]
 8000a82:	bf08      	it	eq
 8000a84:	f8c8 1000 	streq.w	r1, [r8]
 8000a88:	5162      	str	r2, [r4, r5]
 8000a8a:	604b      	str	r3, [r1, #4]
 8000a8c:	4630      	mov	r0, r6
 8000a8e:	f000 f82f 	bl	8000af0 <__malloc_unlock>
 8000a92:	f104 000b 	add.w	r0, r4, #11
 8000a96:	1d23      	adds	r3, r4, #4
 8000a98:	f020 0007 	bic.w	r0, r0, #7
 8000a9c:	1ac2      	subs	r2, r0, r3
 8000a9e:	bf1c      	itt	ne
 8000aa0:	1a1b      	subne	r3, r3, r0
 8000aa2:	50a3      	strne	r3, [r4, r2]
 8000aa4:	e7af      	b.n	8000a06 <_malloc_r+0x22>
 8000aa6:	6862      	ldr	r2, [r4, #4]
 8000aa8:	42a3      	cmp	r3, r4
 8000aaa:	bf0c      	ite	eq
 8000aac:	f8c8 2000 	streq.w	r2, [r8]
 8000ab0:	605a      	strne	r2, [r3, #4]
 8000ab2:	e7eb      	b.n	8000a8c <_malloc_r+0xa8>
 8000ab4:	4623      	mov	r3, r4
 8000ab6:	6864      	ldr	r4, [r4, #4]
 8000ab8:	e7ae      	b.n	8000a18 <_malloc_r+0x34>
 8000aba:	463c      	mov	r4, r7
 8000abc:	687f      	ldr	r7, [r7, #4]
 8000abe:	e7b6      	b.n	8000a2e <_malloc_r+0x4a>
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	42a3      	cmp	r3, r4
 8000ac6:	d1fb      	bne.n	8000ac0 <_malloc_r+0xdc>
 8000ac8:	2300      	movs	r3, #0
 8000aca:	6053      	str	r3, [r2, #4]
 8000acc:	e7de      	b.n	8000a8c <_malloc_r+0xa8>
 8000ace:	230c      	movs	r3, #12
 8000ad0:	6033      	str	r3, [r6, #0]
 8000ad2:	4630      	mov	r0, r6
 8000ad4:	f000 f80c 	bl	8000af0 <__malloc_unlock>
 8000ad8:	e794      	b.n	8000a04 <_malloc_r+0x20>
 8000ada:	6005      	str	r5, [r0, #0]
 8000adc:	e7d6      	b.n	8000a8c <_malloc_r+0xa8>
 8000ade:	bf00      	nop
 8000ae0:	200001ec 	.word	0x200001ec

08000ae4 <__malloc_lock>:
 8000ae4:	4801      	ldr	r0, [pc, #4]	@ (8000aec <__malloc_lock+0x8>)
 8000ae6:	f7ff bf0f 	b.w	8000908 <__retarget_lock_acquire_recursive>
 8000aea:	bf00      	nop
 8000aec:	200001e4 	.word	0x200001e4

08000af0 <__malloc_unlock>:
 8000af0:	4801      	ldr	r0, [pc, #4]	@ (8000af8 <__malloc_unlock+0x8>)
 8000af2:	f7ff bf0a 	b.w	800090a <__retarget_lock_release_recursive>
 8000af6:	bf00      	nop
 8000af8:	200001e4 	.word	0x200001e4

08000afc <__ssputs_r>:
 8000afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b00:	688e      	ldr	r6, [r1, #8]
 8000b02:	461f      	mov	r7, r3
 8000b04:	42be      	cmp	r6, r7
 8000b06:	680b      	ldr	r3, [r1, #0]
 8000b08:	4682      	mov	sl, r0
 8000b0a:	460c      	mov	r4, r1
 8000b0c:	4690      	mov	r8, r2
 8000b0e:	d82d      	bhi.n	8000b6c <__ssputs_r+0x70>
 8000b10:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000b14:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8000b18:	d026      	beq.n	8000b68 <__ssputs_r+0x6c>
 8000b1a:	6965      	ldr	r5, [r4, #20]
 8000b1c:	6909      	ldr	r1, [r1, #16]
 8000b1e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000b22:	eba3 0901 	sub.w	r9, r3, r1
 8000b26:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000b2a:	1c7b      	adds	r3, r7, #1
 8000b2c:	444b      	add	r3, r9
 8000b2e:	106d      	asrs	r5, r5, #1
 8000b30:	429d      	cmp	r5, r3
 8000b32:	bf38      	it	cc
 8000b34:	461d      	movcc	r5, r3
 8000b36:	0553      	lsls	r3, r2, #21
 8000b38:	d527      	bpl.n	8000b8a <__ssputs_r+0x8e>
 8000b3a:	4629      	mov	r1, r5
 8000b3c:	f7ff ff52 	bl	80009e4 <_malloc_r>
 8000b40:	4606      	mov	r6, r0
 8000b42:	b360      	cbz	r0, 8000b9e <__ssputs_r+0xa2>
 8000b44:	6921      	ldr	r1, [r4, #16]
 8000b46:	464a      	mov	r2, r9
 8000b48:	f000 fae6 	bl	8001118 <memcpy>
 8000b4c:	89a3      	ldrh	r3, [r4, #12]
 8000b4e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8000b52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b56:	81a3      	strh	r3, [r4, #12]
 8000b58:	6126      	str	r6, [r4, #16]
 8000b5a:	6165      	str	r5, [r4, #20]
 8000b5c:	444e      	add	r6, r9
 8000b5e:	eba5 0509 	sub.w	r5, r5, r9
 8000b62:	6026      	str	r6, [r4, #0]
 8000b64:	60a5      	str	r5, [r4, #8]
 8000b66:	463e      	mov	r6, r7
 8000b68:	42be      	cmp	r6, r7
 8000b6a:	d900      	bls.n	8000b6e <__ssputs_r+0x72>
 8000b6c:	463e      	mov	r6, r7
 8000b6e:	6820      	ldr	r0, [r4, #0]
 8000b70:	4632      	mov	r2, r6
 8000b72:	4641      	mov	r1, r8
 8000b74:	f000 faa6 	bl	80010c4 <memmove>
 8000b78:	68a3      	ldr	r3, [r4, #8]
 8000b7a:	1b9b      	subs	r3, r3, r6
 8000b7c:	60a3      	str	r3, [r4, #8]
 8000b7e:	6823      	ldr	r3, [r4, #0]
 8000b80:	4433      	add	r3, r6
 8000b82:	6023      	str	r3, [r4, #0]
 8000b84:	2000      	movs	r0, #0
 8000b86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b8a:	462a      	mov	r2, r5
 8000b8c:	f000 fad2 	bl	8001134 <_realloc_r>
 8000b90:	4606      	mov	r6, r0
 8000b92:	2800      	cmp	r0, #0
 8000b94:	d1e0      	bne.n	8000b58 <__ssputs_r+0x5c>
 8000b96:	6921      	ldr	r1, [r4, #16]
 8000b98:	4650      	mov	r0, sl
 8000b9a:	f7ff feb7 	bl	800090c <_free_r>
 8000b9e:	230c      	movs	r3, #12
 8000ba0:	f8ca 3000 	str.w	r3, [sl]
 8000ba4:	89a3      	ldrh	r3, [r4, #12]
 8000ba6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000baa:	81a3      	strh	r3, [r4, #12]
 8000bac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bb0:	e7e9      	b.n	8000b86 <__ssputs_r+0x8a>
	...

08000bb4 <_svfiprintf_r>:
 8000bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000bb8:	4698      	mov	r8, r3
 8000bba:	898b      	ldrh	r3, [r1, #12]
 8000bbc:	061b      	lsls	r3, r3, #24
 8000bbe:	b09d      	sub	sp, #116	@ 0x74
 8000bc0:	4607      	mov	r7, r0
 8000bc2:	460d      	mov	r5, r1
 8000bc4:	4614      	mov	r4, r2
 8000bc6:	d510      	bpl.n	8000bea <_svfiprintf_r+0x36>
 8000bc8:	690b      	ldr	r3, [r1, #16]
 8000bca:	b973      	cbnz	r3, 8000bea <_svfiprintf_r+0x36>
 8000bcc:	2140      	movs	r1, #64	@ 0x40
 8000bce:	f7ff ff09 	bl	80009e4 <_malloc_r>
 8000bd2:	6028      	str	r0, [r5, #0]
 8000bd4:	6128      	str	r0, [r5, #16]
 8000bd6:	b930      	cbnz	r0, 8000be6 <_svfiprintf_r+0x32>
 8000bd8:	230c      	movs	r3, #12
 8000bda:	603b      	str	r3, [r7, #0]
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000be0:	b01d      	add	sp, #116	@ 0x74
 8000be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000be6:	2340      	movs	r3, #64	@ 0x40
 8000be8:	616b      	str	r3, [r5, #20]
 8000bea:	2300      	movs	r3, #0
 8000bec:	9309      	str	r3, [sp, #36]	@ 0x24
 8000bee:	2320      	movs	r3, #32
 8000bf0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000bf4:	f8cd 800c 	str.w	r8, [sp, #12]
 8000bf8:	2330      	movs	r3, #48	@ 0x30
 8000bfa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8000d98 <_svfiprintf_r+0x1e4>
 8000bfe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000c02:	f04f 0901 	mov.w	r9, #1
 8000c06:	4623      	mov	r3, r4
 8000c08:	469a      	mov	sl, r3
 8000c0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000c0e:	b10a      	cbz	r2, 8000c14 <_svfiprintf_r+0x60>
 8000c10:	2a25      	cmp	r2, #37	@ 0x25
 8000c12:	d1f9      	bne.n	8000c08 <_svfiprintf_r+0x54>
 8000c14:	ebba 0b04 	subs.w	fp, sl, r4
 8000c18:	d00b      	beq.n	8000c32 <_svfiprintf_r+0x7e>
 8000c1a:	465b      	mov	r3, fp
 8000c1c:	4622      	mov	r2, r4
 8000c1e:	4629      	mov	r1, r5
 8000c20:	4638      	mov	r0, r7
 8000c22:	f7ff ff6b 	bl	8000afc <__ssputs_r>
 8000c26:	3001      	adds	r0, #1
 8000c28:	f000 80a7 	beq.w	8000d7a <_svfiprintf_r+0x1c6>
 8000c2c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000c2e:	445a      	add	r2, fp
 8000c30:	9209      	str	r2, [sp, #36]	@ 0x24
 8000c32:	f89a 3000 	ldrb.w	r3, [sl]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	f000 809f 	beq.w	8000d7a <_svfiprintf_r+0x1c6>
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000c42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000c46:	f10a 0a01 	add.w	sl, sl, #1
 8000c4a:	9304      	str	r3, [sp, #16]
 8000c4c:	9307      	str	r3, [sp, #28]
 8000c4e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000c52:	931a      	str	r3, [sp, #104]	@ 0x68
 8000c54:	4654      	mov	r4, sl
 8000c56:	2205      	movs	r2, #5
 8000c58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c5c:	484e      	ldr	r0, [pc, #312]	@ (8000d98 <_svfiprintf_r+0x1e4>)
 8000c5e:	f7ff fab7 	bl	80001d0 <memchr>
 8000c62:	9a04      	ldr	r2, [sp, #16]
 8000c64:	b9d8      	cbnz	r0, 8000c9e <_svfiprintf_r+0xea>
 8000c66:	06d0      	lsls	r0, r2, #27
 8000c68:	bf44      	itt	mi
 8000c6a:	2320      	movmi	r3, #32
 8000c6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000c70:	0711      	lsls	r1, r2, #28
 8000c72:	bf44      	itt	mi
 8000c74:	232b      	movmi	r3, #43	@ 0x2b
 8000c76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000c7a:	f89a 3000 	ldrb.w	r3, [sl]
 8000c7e:	2b2a      	cmp	r3, #42	@ 0x2a
 8000c80:	d015      	beq.n	8000cae <_svfiprintf_r+0xfa>
 8000c82:	9a07      	ldr	r2, [sp, #28]
 8000c84:	4654      	mov	r4, sl
 8000c86:	2000      	movs	r0, #0
 8000c88:	f04f 0c0a 	mov.w	ip, #10
 8000c8c:	4621      	mov	r1, r4
 8000c8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000c92:	3b30      	subs	r3, #48	@ 0x30
 8000c94:	2b09      	cmp	r3, #9
 8000c96:	d94b      	bls.n	8000d30 <_svfiprintf_r+0x17c>
 8000c98:	b1b0      	cbz	r0, 8000cc8 <_svfiprintf_r+0x114>
 8000c9a:	9207      	str	r2, [sp, #28]
 8000c9c:	e014      	b.n	8000cc8 <_svfiprintf_r+0x114>
 8000c9e:	eba0 0308 	sub.w	r3, r0, r8
 8000ca2:	fa09 f303 	lsl.w	r3, r9, r3
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	9304      	str	r3, [sp, #16]
 8000caa:	46a2      	mov	sl, r4
 8000cac:	e7d2      	b.n	8000c54 <_svfiprintf_r+0xa0>
 8000cae:	9b03      	ldr	r3, [sp, #12]
 8000cb0:	1d19      	adds	r1, r3, #4
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	9103      	str	r1, [sp, #12]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	bfbb      	ittet	lt
 8000cba:	425b      	neglt	r3, r3
 8000cbc:	f042 0202 	orrlt.w	r2, r2, #2
 8000cc0:	9307      	strge	r3, [sp, #28]
 8000cc2:	9307      	strlt	r3, [sp, #28]
 8000cc4:	bfb8      	it	lt
 8000cc6:	9204      	strlt	r2, [sp, #16]
 8000cc8:	7823      	ldrb	r3, [r4, #0]
 8000cca:	2b2e      	cmp	r3, #46	@ 0x2e
 8000ccc:	d10a      	bne.n	8000ce4 <_svfiprintf_r+0x130>
 8000cce:	7863      	ldrb	r3, [r4, #1]
 8000cd0:	2b2a      	cmp	r3, #42	@ 0x2a
 8000cd2:	d132      	bne.n	8000d3a <_svfiprintf_r+0x186>
 8000cd4:	9b03      	ldr	r3, [sp, #12]
 8000cd6:	1d1a      	adds	r2, r3, #4
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	9203      	str	r2, [sp, #12]
 8000cdc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000ce0:	3402      	adds	r4, #2
 8000ce2:	9305      	str	r3, [sp, #20]
 8000ce4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8000d9c <_svfiprintf_r+0x1e8>
 8000ce8:	7821      	ldrb	r1, [r4, #0]
 8000cea:	2203      	movs	r2, #3
 8000cec:	4650      	mov	r0, sl
 8000cee:	f7ff fa6f 	bl	80001d0 <memchr>
 8000cf2:	b138      	cbz	r0, 8000d04 <_svfiprintf_r+0x150>
 8000cf4:	9b04      	ldr	r3, [sp, #16]
 8000cf6:	eba0 000a 	sub.w	r0, r0, sl
 8000cfa:	2240      	movs	r2, #64	@ 0x40
 8000cfc:	4082      	lsls	r2, r0
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	3401      	adds	r4, #1
 8000d02:	9304      	str	r3, [sp, #16]
 8000d04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d08:	4825      	ldr	r0, [pc, #148]	@ (8000da0 <_svfiprintf_r+0x1ec>)
 8000d0a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000d0e:	2206      	movs	r2, #6
 8000d10:	f7ff fa5e 	bl	80001d0 <memchr>
 8000d14:	2800      	cmp	r0, #0
 8000d16:	d036      	beq.n	8000d86 <_svfiprintf_r+0x1d2>
 8000d18:	4b22      	ldr	r3, [pc, #136]	@ (8000da4 <_svfiprintf_r+0x1f0>)
 8000d1a:	bb1b      	cbnz	r3, 8000d64 <_svfiprintf_r+0x1b0>
 8000d1c:	9b03      	ldr	r3, [sp, #12]
 8000d1e:	3307      	adds	r3, #7
 8000d20:	f023 0307 	bic.w	r3, r3, #7
 8000d24:	3308      	adds	r3, #8
 8000d26:	9303      	str	r3, [sp, #12]
 8000d28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000d2a:	4433      	add	r3, r6
 8000d2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8000d2e:	e76a      	b.n	8000c06 <_svfiprintf_r+0x52>
 8000d30:	fb0c 3202 	mla	r2, ip, r2, r3
 8000d34:	460c      	mov	r4, r1
 8000d36:	2001      	movs	r0, #1
 8000d38:	e7a8      	b.n	8000c8c <_svfiprintf_r+0xd8>
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	3401      	adds	r4, #1
 8000d3e:	9305      	str	r3, [sp, #20]
 8000d40:	4619      	mov	r1, r3
 8000d42:	f04f 0c0a 	mov.w	ip, #10
 8000d46:	4620      	mov	r0, r4
 8000d48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000d4c:	3a30      	subs	r2, #48	@ 0x30
 8000d4e:	2a09      	cmp	r2, #9
 8000d50:	d903      	bls.n	8000d5a <_svfiprintf_r+0x1a6>
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d0c6      	beq.n	8000ce4 <_svfiprintf_r+0x130>
 8000d56:	9105      	str	r1, [sp, #20]
 8000d58:	e7c4      	b.n	8000ce4 <_svfiprintf_r+0x130>
 8000d5a:	fb0c 2101 	mla	r1, ip, r1, r2
 8000d5e:	4604      	mov	r4, r0
 8000d60:	2301      	movs	r3, #1
 8000d62:	e7f0      	b.n	8000d46 <_svfiprintf_r+0x192>
 8000d64:	ab03      	add	r3, sp, #12
 8000d66:	9300      	str	r3, [sp, #0]
 8000d68:	462a      	mov	r2, r5
 8000d6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000da8 <_svfiprintf_r+0x1f4>)
 8000d6c:	a904      	add	r1, sp, #16
 8000d6e:	4638      	mov	r0, r7
 8000d70:	f3af 8000 	nop.w
 8000d74:	1c42      	adds	r2, r0, #1
 8000d76:	4606      	mov	r6, r0
 8000d78:	d1d6      	bne.n	8000d28 <_svfiprintf_r+0x174>
 8000d7a:	89ab      	ldrh	r3, [r5, #12]
 8000d7c:	065b      	lsls	r3, r3, #25
 8000d7e:	f53f af2d 	bmi.w	8000bdc <_svfiprintf_r+0x28>
 8000d82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000d84:	e72c      	b.n	8000be0 <_svfiprintf_r+0x2c>
 8000d86:	ab03      	add	r3, sp, #12
 8000d88:	9300      	str	r3, [sp, #0]
 8000d8a:	462a      	mov	r2, r5
 8000d8c:	4b06      	ldr	r3, [pc, #24]	@ (8000da8 <_svfiprintf_r+0x1f4>)
 8000d8e:	a904      	add	r1, sp, #16
 8000d90:	4638      	mov	r0, r7
 8000d92:	f000 f879 	bl	8000e88 <_printf_i>
 8000d96:	e7ed      	b.n	8000d74 <_svfiprintf_r+0x1c0>
 8000d98:	080011fa 	.word	0x080011fa
 8000d9c:	08001200 	.word	0x08001200
 8000da0:	08001204 	.word	0x08001204
 8000da4:	00000000 	.word	0x00000000
 8000da8:	08000afd 	.word	0x08000afd

08000dac <_printf_common>:
 8000dac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000db0:	4616      	mov	r6, r2
 8000db2:	4698      	mov	r8, r3
 8000db4:	688a      	ldr	r2, [r1, #8]
 8000db6:	690b      	ldr	r3, [r1, #16]
 8000db8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	bfb8      	it	lt
 8000dc0:	4613      	movlt	r3, r2
 8000dc2:	6033      	str	r3, [r6, #0]
 8000dc4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000dc8:	4607      	mov	r7, r0
 8000dca:	460c      	mov	r4, r1
 8000dcc:	b10a      	cbz	r2, 8000dd2 <_printf_common+0x26>
 8000dce:	3301      	adds	r3, #1
 8000dd0:	6033      	str	r3, [r6, #0]
 8000dd2:	6823      	ldr	r3, [r4, #0]
 8000dd4:	0699      	lsls	r1, r3, #26
 8000dd6:	bf42      	ittt	mi
 8000dd8:	6833      	ldrmi	r3, [r6, #0]
 8000dda:	3302      	addmi	r3, #2
 8000ddc:	6033      	strmi	r3, [r6, #0]
 8000dde:	6825      	ldr	r5, [r4, #0]
 8000de0:	f015 0506 	ands.w	r5, r5, #6
 8000de4:	d106      	bne.n	8000df4 <_printf_common+0x48>
 8000de6:	f104 0a19 	add.w	sl, r4, #25
 8000dea:	68e3      	ldr	r3, [r4, #12]
 8000dec:	6832      	ldr	r2, [r6, #0]
 8000dee:	1a9b      	subs	r3, r3, r2
 8000df0:	42ab      	cmp	r3, r5
 8000df2:	dc26      	bgt.n	8000e42 <_printf_common+0x96>
 8000df4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000df8:	6822      	ldr	r2, [r4, #0]
 8000dfa:	3b00      	subs	r3, #0
 8000dfc:	bf18      	it	ne
 8000dfe:	2301      	movne	r3, #1
 8000e00:	0692      	lsls	r2, r2, #26
 8000e02:	d42b      	bmi.n	8000e5c <_printf_common+0xb0>
 8000e04:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000e08:	4641      	mov	r1, r8
 8000e0a:	4638      	mov	r0, r7
 8000e0c:	47c8      	blx	r9
 8000e0e:	3001      	adds	r0, #1
 8000e10:	d01e      	beq.n	8000e50 <_printf_common+0xa4>
 8000e12:	6823      	ldr	r3, [r4, #0]
 8000e14:	6922      	ldr	r2, [r4, #16]
 8000e16:	f003 0306 	and.w	r3, r3, #6
 8000e1a:	2b04      	cmp	r3, #4
 8000e1c:	bf02      	ittt	eq
 8000e1e:	68e5      	ldreq	r5, [r4, #12]
 8000e20:	6833      	ldreq	r3, [r6, #0]
 8000e22:	1aed      	subeq	r5, r5, r3
 8000e24:	68a3      	ldr	r3, [r4, #8]
 8000e26:	bf0c      	ite	eq
 8000e28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000e2c:	2500      	movne	r5, #0
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	bfc4      	itt	gt
 8000e32:	1a9b      	subgt	r3, r3, r2
 8000e34:	18ed      	addgt	r5, r5, r3
 8000e36:	2600      	movs	r6, #0
 8000e38:	341a      	adds	r4, #26
 8000e3a:	42b5      	cmp	r5, r6
 8000e3c:	d11a      	bne.n	8000e74 <_printf_common+0xc8>
 8000e3e:	2000      	movs	r0, #0
 8000e40:	e008      	b.n	8000e54 <_printf_common+0xa8>
 8000e42:	2301      	movs	r3, #1
 8000e44:	4652      	mov	r2, sl
 8000e46:	4641      	mov	r1, r8
 8000e48:	4638      	mov	r0, r7
 8000e4a:	47c8      	blx	r9
 8000e4c:	3001      	adds	r0, #1
 8000e4e:	d103      	bne.n	8000e58 <_printf_common+0xac>
 8000e50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e58:	3501      	adds	r5, #1
 8000e5a:	e7c6      	b.n	8000dea <_printf_common+0x3e>
 8000e5c:	18e1      	adds	r1, r4, r3
 8000e5e:	1c5a      	adds	r2, r3, #1
 8000e60:	2030      	movs	r0, #48	@ 0x30
 8000e62:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000e66:	4422      	add	r2, r4
 8000e68:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000e6c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000e70:	3302      	adds	r3, #2
 8000e72:	e7c7      	b.n	8000e04 <_printf_common+0x58>
 8000e74:	2301      	movs	r3, #1
 8000e76:	4622      	mov	r2, r4
 8000e78:	4641      	mov	r1, r8
 8000e7a:	4638      	mov	r0, r7
 8000e7c:	47c8      	blx	r9
 8000e7e:	3001      	adds	r0, #1
 8000e80:	d0e6      	beq.n	8000e50 <_printf_common+0xa4>
 8000e82:	3601      	adds	r6, #1
 8000e84:	e7d9      	b.n	8000e3a <_printf_common+0x8e>
	...

08000e88 <_printf_i>:
 8000e88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000e8c:	7e0f      	ldrb	r7, [r1, #24]
 8000e8e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000e90:	2f78      	cmp	r7, #120	@ 0x78
 8000e92:	4691      	mov	r9, r2
 8000e94:	4680      	mov	r8, r0
 8000e96:	460c      	mov	r4, r1
 8000e98:	469a      	mov	sl, r3
 8000e9a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000e9e:	d807      	bhi.n	8000eb0 <_printf_i+0x28>
 8000ea0:	2f62      	cmp	r7, #98	@ 0x62
 8000ea2:	d80a      	bhi.n	8000eba <_printf_i+0x32>
 8000ea4:	2f00      	cmp	r7, #0
 8000ea6:	f000 80d1 	beq.w	800104c <_printf_i+0x1c4>
 8000eaa:	2f58      	cmp	r7, #88	@ 0x58
 8000eac:	f000 80b8 	beq.w	8001020 <_printf_i+0x198>
 8000eb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000eb4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000eb8:	e03a      	b.n	8000f30 <_printf_i+0xa8>
 8000eba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000ebe:	2b15      	cmp	r3, #21
 8000ec0:	d8f6      	bhi.n	8000eb0 <_printf_i+0x28>
 8000ec2:	a101      	add	r1, pc, #4	@ (adr r1, 8000ec8 <_printf_i+0x40>)
 8000ec4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000ec8:	08000f21 	.word	0x08000f21
 8000ecc:	08000f35 	.word	0x08000f35
 8000ed0:	08000eb1 	.word	0x08000eb1
 8000ed4:	08000eb1 	.word	0x08000eb1
 8000ed8:	08000eb1 	.word	0x08000eb1
 8000edc:	08000eb1 	.word	0x08000eb1
 8000ee0:	08000f35 	.word	0x08000f35
 8000ee4:	08000eb1 	.word	0x08000eb1
 8000ee8:	08000eb1 	.word	0x08000eb1
 8000eec:	08000eb1 	.word	0x08000eb1
 8000ef0:	08000eb1 	.word	0x08000eb1
 8000ef4:	08001033 	.word	0x08001033
 8000ef8:	08000f5f 	.word	0x08000f5f
 8000efc:	08000fed 	.word	0x08000fed
 8000f00:	08000eb1 	.word	0x08000eb1
 8000f04:	08000eb1 	.word	0x08000eb1
 8000f08:	08001055 	.word	0x08001055
 8000f0c:	08000eb1 	.word	0x08000eb1
 8000f10:	08000f5f 	.word	0x08000f5f
 8000f14:	08000eb1 	.word	0x08000eb1
 8000f18:	08000eb1 	.word	0x08000eb1
 8000f1c:	08000ff5 	.word	0x08000ff5
 8000f20:	6833      	ldr	r3, [r6, #0]
 8000f22:	1d1a      	adds	r2, r3, #4
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	6032      	str	r2, [r6, #0]
 8000f28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000f2c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000f30:	2301      	movs	r3, #1
 8000f32:	e09c      	b.n	800106e <_printf_i+0x1e6>
 8000f34:	6833      	ldr	r3, [r6, #0]
 8000f36:	6820      	ldr	r0, [r4, #0]
 8000f38:	1d19      	adds	r1, r3, #4
 8000f3a:	6031      	str	r1, [r6, #0]
 8000f3c:	0606      	lsls	r6, r0, #24
 8000f3e:	d501      	bpl.n	8000f44 <_printf_i+0xbc>
 8000f40:	681d      	ldr	r5, [r3, #0]
 8000f42:	e003      	b.n	8000f4c <_printf_i+0xc4>
 8000f44:	0645      	lsls	r5, r0, #25
 8000f46:	d5fb      	bpl.n	8000f40 <_printf_i+0xb8>
 8000f48:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000f4c:	2d00      	cmp	r5, #0
 8000f4e:	da03      	bge.n	8000f58 <_printf_i+0xd0>
 8000f50:	232d      	movs	r3, #45	@ 0x2d
 8000f52:	426d      	negs	r5, r5
 8000f54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000f58:	4858      	ldr	r0, [pc, #352]	@ (80010bc <_printf_i+0x234>)
 8000f5a:	230a      	movs	r3, #10
 8000f5c:	e011      	b.n	8000f82 <_printf_i+0xfa>
 8000f5e:	6821      	ldr	r1, [r4, #0]
 8000f60:	6833      	ldr	r3, [r6, #0]
 8000f62:	0608      	lsls	r0, r1, #24
 8000f64:	f853 5b04 	ldr.w	r5, [r3], #4
 8000f68:	d402      	bmi.n	8000f70 <_printf_i+0xe8>
 8000f6a:	0649      	lsls	r1, r1, #25
 8000f6c:	bf48      	it	mi
 8000f6e:	b2ad      	uxthmi	r5, r5
 8000f70:	2f6f      	cmp	r7, #111	@ 0x6f
 8000f72:	4852      	ldr	r0, [pc, #328]	@ (80010bc <_printf_i+0x234>)
 8000f74:	6033      	str	r3, [r6, #0]
 8000f76:	bf14      	ite	ne
 8000f78:	230a      	movne	r3, #10
 8000f7a:	2308      	moveq	r3, #8
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8000f82:	6866      	ldr	r6, [r4, #4]
 8000f84:	60a6      	str	r6, [r4, #8]
 8000f86:	2e00      	cmp	r6, #0
 8000f88:	db05      	blt.n	8000f96 <_printf_i+0x10e>
 8000f8a:	6821      	ldr	r1, [r4, #0]
 8000f8c:	432e      	orrs	r6, r5
 8000f8e:	f021 0104 	bic.w	r1, r1, #4
 8000f92:	6021      	str	r1, [r4, #0]
 8000f94:	d04b      	beq.n	800102e <_printf_i+0x1a6>
 8000f96:	4616      	mov	r6, r2
 8000f98:	fbb5 f1f3 	udiv	r1, r5, r3
 8000f9c:	fb03 5711 	mls	r7, r3, r1, r5
 8000fa0:	5dc7      	ldrb	r7, [r0, r7]
 8000fa2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000fa6:	462f      	mov	r7, r5
 8000fa8:	42bb      	cmp	r3, r7
 8000faa:	460d      	mov	r5, r1
 8000fac:	d9f4      	bls.n	8000f98 <_printf_i+0x110>
 8000fae:	2b08      	cmp	r3, #8
 8000fb0:	d10b      	bne.n	8000fca <_printf_i+0x142>
 8000fb2:	6823      	ldr	r3, [r4, #0]
 8000fb4:	07df      	lsls	r7, r3, #31
 8000fb6:	d508      	bpl.n	8000fca <_printf_i+0x142>
 8000fb8:	6923      	ldr	r3, [r4, #16]
 8000fba:	6861      	ldr	r1, [r4, #4]
 8000fbc:	4299      	cmp	r1, r3
 8000fbe:	bfde      	ittt	le
 8000fc0:	2330      	movle	r3, #48	@ 0x30
 8000fc2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000fc6:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8000fca:	1b92      	subs	r2, r2, r6
 8000fcc:	6122      	str	r2, [r4, #16]
 8000fce:	f8cd a000 	str.w	sl, [sp]
 8000fd2:	464b      	mov	r3, r9
 8000fd4:	aa03      	add	r2, sp, #12
 8000fd6:	4621      	mov	r1, r4
 8000fd8:	4640      	mov	r0, r8
 8000fda:	f7ff fee7 	bl	8000dac <_printf_common>
 8000fde:	3001      	adds	r0, #1
 8000fe0:	d14a      	bne.n	8001078 <_printf_i+0x1f0>
 8000fe2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000fe6:	b004      	add	sp, #16
 8000fe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fec:	6823      	ldr	r3, [r4, #0]
 8000fee:	f043 0320 	orr.w	r3, r3, #32
 8000ff2:	6023      	str	r3, [r4, #0]
 8000ff4:	4832      	ldr	r0, [pc, #200]	@ (80010c0 <_printf_i+0x238>)
 8000ff6:	2778      	movs	r7, #120	@ 0x78
 8000ff8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8000ffc:	6823      	ldr	r3, [r4, #0]
 8000ffe:	6831      	ldr	r1, [r6, #0]
 8001000:	061f      	lsls	r7, r3, #24
 8001002:	f851 5b04 	ldr.w	r5, [r1], #4
 8001006:	d402      	bmi.n	800100e <_printf_i+0x186>
 8001008:	065f      	lsls	r7, r3, #25
 800100a:	bf48      	it	mi
 800100c:	b2ad      	uxthmi	r5, r5
 800100e:	6031      	str	r1, [r6, #0]
 8001010:	07d9      	lsls	r1, r3, #31
 8001012:	bf44      	itt	mi
 8001014:	f043 0320 	orrmi.w	r3, r3, #32
 8001018:	6023      	strmi	r3, [r4, #0]
 800101a:	b11d      	cbz	r5, 8001024 <_printf_i+0x19c>
 800101c:	2310      	movs	r3, #16
 800101e:	e7ad      	b.n	8000f7c <_printf_i+0xf4>
 8001020:	4826      	ldr	r0, [pc, #152]	@ (80010bc <_printf_i+0x234>)
 8001022:	e7e9      	b.n	8000ff8 <_printf_i+0x170>
 8001024:	6823      	ldr	r3, [r4, #0]
 8001026:	f023 0320 	bic.w	r3, r3, #32
 800102a:	6023      	str	r3, [r4, #0]
 800102c:	e7f6      	b.n	800101c <_printf_i+0x194>
 800102e:	4616      	mov	r6, r2
 8001030:	e7bd      	b.n	8000fae <_printf_i+0x126>
 8001032:	6833      	ldr	r3, [r6, #0]
 8001034:	6825      	ldr	r5, [r4, #0]
 8001036:	6961      	ldr	r1, [r4, #20]
 8001038:	1d18      	adds	r0, r3, #4
 800103a:	6030      	str	r0, [r6, #0]
 800103c:	062e      	lsls	r6, r5, #24
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	d501      	bpl.n	8001046 <_printf_i+0x1be>
 8001042:	6019      	str	r1, [r3, #0]
 8001044:	e002      	b.n	800104c <_printf_i+0x1c4>
 8001046:	0668      	lsls	r0, r5, #25
 8001048:	d5fb      	bpl.n	8001042 <_printf_i+0x1ba>
 800104a:	8019      	strh	r1, [r3, #0]
 800104c:	2300      	movs	r3, #0
 800104e:	6123      	str	r3, [r4, #16]
 8001050:	4616      	mov	r6, r2
 8001052:	e7bc      	b.n	8000fce <_printf_i+0x146>
 8001054:	6833      	ldr	r3, [r6, #0]
 8001056:	1d1a      	adds	r2, r3, #4
 8001058:	6032      	str	r2, [r6, #0]
 800105a:	681e      	ldr	r6, [r3, #0]
 800105c:	6862      	ldr	r2, [r4, #4]
 800105e:	2100      	movs	r1, #0
 8001060:	4630      	mov	r0, r6
 8001062:	f7ff f8b5 	bl	80001d0 <memchr>
 8001066:	b108      	cbz	r0, 800106c <_printf_i+0x1e4>
 8001068:	1b80      	subs	r0, r0, r6
 800106a:	6060      	str	r0, [r4, #4]
 800106c:	6863      	ldr	r3, [r4, #4]
 800106e:	6123      	str	r3, [r4, #16]
 8001070:	2300      	movs	r3, #0
 8001072:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001076:	e7aa      	b.n	8000fce <_printf_i+0x146>
 8001078:	6923      	ldr	r3, [r4, #16]
 800107a:	4632      	mov	r2, r6
 800107c:	4649      	mov	r1, r9
 800107e:	4640      	mov	r0, r8
 8001080:	47d0      	blx	sl
 8001082:	3001      	adds	r0, #1
 8001084:	d0ad      	beq.n	8000fe2 <_printf_i+0x15a>
 8001086:	6823      	ldr	r3, [r4, #0]
 8001088:	079b      	lsls	r3, r3, #30
 800108a:	d413      	bmi.n	80010b4 <_printf_i+0x22c>
 800108c:	68e0      	ldr	r0, [r4, #12]
 800108e:	9b03      	ldr	r3, [sp, #12]
 8001090:	4298      	cmp	r0, r3
 8001092:	bfb8      	it	lt
 8001094:	4618      	movlt	r0, r3
 8001096:	e7a6      	b.n	8000fe6 <_printf_i+0x15e>
 8001098:	2301      	movs	r3, #1
 800109a:	4632      	mov	r2, r6
 800109c:	4649      	mov	r1, r9
 800109e:	4640      	mov	r0, r8
 80010a0:	47d0      	blx	sl
 80010a2:	3001      	adds	r0, #1
 80010a4:	d09d      	beq.n	8000fe2 <_printf_i+0x15a>
 80010a6:	3501      	adds	r5, #1
 80010a8:	68e3      	ldr	r3, [r4, #12]
 80010aa:	9903      	ldr	r1, [sp, #12]
 80010ac:	1a5b      	subs	r3, r3, r1
 80010ae:	42ab      	cmp	r3, r5
 80010b0:	dcf2      	bgt.n	8001098 <_printf_i+0x210>
 80010b2:	e7eb      	b.n	800108c <_printf_i+0x204>
 80010b4:	2500      	movs	r5, #0
 80010b6:	f104 0619 	add.w	r6, r4, #25
 80010ba:	e7f5      	b.n	80010a8 <_printf_i+0x220>
 80010bc:	0800120b 	.word	0x0800120b
 80010c0:	0800121c 	.word	0x0800121c

080010c4 <memmove>:
 80010c4:	4288      	cmp	r0, r1
 80010c6:	b510      	push	{r4, lr}
 80010c8:	eb01 0402 	add.w	r4, r1, r2
 80010cc:	d902      	bls.n	80010d4 <memmove+0x10>
 80010ce:	4284      	cmp	r4, r0
 80010d0:	4623      	mov	r3, r4
 80010d2:	d807      	bhi.n	80010e4 <memmove+0x20>
 80010d4:	1e43      	subs	r3, r0, #1
 80010d6:	42a1      	cmp	r1, r4
 80010d8:	d008      	beq.n	80010ec <memmove+0x28>
 80010da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80010de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80010e2:	e7f8      	b.n	80010d6 <memmove+0x12>
 80010e4:	4402      	add	r2, r0
 80010e6:	4601      	mov	r1, r0
 80010e8:	428a      	cmp	r2, r1
 80010ea:	d100      	bne.n	80010ee <memmove+0x2a>
 80010ec:	bd10      	pop	{r4, pc}
 80010ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80010f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80010f6:	e7f7      	b.n	80010e8 <memmove+0x24>

080010f8 <_sbrk_r>:
 80010f8:	b538      	push	{r3, r4, r5, lr}
 80010fa:	4d06      	ldr	r5, [pc, #24]	@ (8001114 <_sbrk_r+0x1c>)
 80010fc:	2300      	movs	r3, #0
 80010fe:	4604      	mov	r4, r0
 8001100:	4608      	mov	r0, r1
 8001102:	602b      	str	r3, [r5, #0]
 8001104:	f7ff fa98 	bl	8000638 <_sbrk>
 8001108:	1c43      	adds	r3, r0, #1
 800110a:	d102      	bne.n	8001112 <_sbrk_r+0x1a>
 800110c:	682b      	ldr	r3, [r5, #0]
 800110e:	b103      	cbz	r3, 8001112 <_sbrk_r+0x1a>
 8001110:	6023      	str	r3, [r4, #0]
 8001112:	bd38      	pop	{r3, r4, r5, pc}
 8001114:	200001e0 	.word	0x200001e0

08001118 <memcpy>:
 8001118:	440a      	add	r2, r1
 800111a:	4291      	cmp	r1, r2
 800111c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8001120:	d100      	bne.n	8001124 <memcpy+0xc>
 8001122:	4770      	bx	lr
 8001124:	b510      	push	{r4, lr}
 8001126:	f811 4b01 	ldrb.w	r4, [r1], #1
 800112a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800112e:	4291      	cmp	r1, r2
 8001130:	d1f9      	bne.n	8001126 <memcpy+0xe>
 8001132:	bd10      	pop	{r4, pc}

08001134 <_realloc_r>:
 8001134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001138:	4607      	mov	r7, r0
 800113a:	4614      	mov	r4, r2
 800113c:	460d      	mov	r5, r1
 800113e:	b921      	cbnz	r1, 800114a <_realloc_r+0x16>
 8001140:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001144:	4611      	mov	r1, r2
 8001146:	f7ff bc4d 	b.w	80009e4 <_malloc_r>
 800114a:	b92a      	cbnz	r2, 8001158 <_realloc_r+0x24>
 800114c:	f7ff fbde 	bl	800090c <_free_r>
 8001150:	4625      	mov	r5, r4
 8001152:	4628      	mov	r0, r5
 8001154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001158:	f000 f81a 	bl	8001190 <_malloc_usable_size_r>
 800115c:	4284      	cmp	r4, r0
 800115e:	4606      	mov	r6, r0
 8001160:	d802      	bhi.n	8001168 <_realloc_r+0x34>
 8001162:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001166:	d8f4      	bhi.n	8001152 <_realloc_r+0x1e>
 8001168:	4621      	mov	r1, r4
 800116a:	4638      	mov	r0, r7
 800116c:	f7ff fc3a 	bl	80009e4 <_malloc_r>
 8001170:	4680      	mov	r8, r0
 8001172:	b908      	cbnz	r0, 8001178 <_realloc_r+0x44>
 8001174:	4645      	mov	r5, r8
 8001176:	e7ec      	b.n	8001152 <_realloc_r+0x1e>
 8001178:	42b4      	cmp	r4, r6
 800117a:	4622      	mov	r2, r4
 800117c:	4629      	mov	r1, r5
 800117e:	bf28      	it	cs
 8001180:	4632      	movcs	r2, r6
 8001182:	f7ff ffc9 	bl	8001118 <memcpy>
 8001186:	4629      	mov	r1, r5
 8001188:	4638      	mov	r0, r7
 800118a:	f7ff fbbf 	bl	800090c <_free_r>
 800118e:	e7f1      	b.n	8001174 <_realloc_r+0x40>

08001190 <_malloc_usable_size_r>:
 8001190:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001194:	1f18      	subs	r0, r3, #4
 8001196:	2b00      	cmp	r3, #0
 8001198:	bfbc      	itt	lt
 800119a:	580b      	ldrlt	r3, [r1, r0]
 800119c:	18c0      	addlt	r0, r0, r3
 800119e:	4770      	bx	lr

080011a0 <_init>:
 80011a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011a2:	bf00      	nop
 80011a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011a6:	bc08      	pop	{r3}
 80011a8:	469e      	mov	lr, r3
 80011aa:	4770      	bx	lr

080011ac <_fini>:
 80011ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011ae:	bf00      	nop
 80011b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011b2:	bc08      	pop	{r3}
 80011b4:	469e      	mov	lr, r3
 80011b6:	4770      	bx	lr
