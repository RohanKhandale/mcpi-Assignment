
UART_pr.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000368  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080004f0  080004f0  000014f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000500  08000500  00001508  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000500  08000500  00001508  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000500  08000508  00001508  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000500  08000500  00001500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000504  08000504  00001504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001508  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001508  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00001508  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000a7e  00000000  00000000  00001532  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000381  00000000  00000000  00001fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000c0  00000000  00000000  00002338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000007f  00000000  00000000  000023f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018035  00000000  00000000  00002477  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001000  00000000  00000000  0001a4ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b885  00000000  00000000  0001b4ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000a6d31  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000001a8  00000000  00000000  000a6d74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 00000025  00000000  00000000  000a6f1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000047  00000000  00000000  000a6f41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080004d8 	.word	0x080004d8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	080004d8 	.word	0x080004d8

080001c8 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b086      	sub	sp, #24
 80001cc:	af00      	add	r7, sp, #0
	char str[16];
	UartInit(9600);
 80001ce:	f44f 5016 	mov.w	r0, #9600	@ 0x2580
 80001d2:	f000 f875 	bl	80002c0 <UartInit>
	UartPuts("Enter Strings\r\n");
 80001d6:	481e      	ldr	r0, [pc, #120]	@ (8000250 <main+0x88>)
 80001d8:	f000 f8ee 	bl	80003b8 <UartPuts>
	while(1) {
		UartGets(str);
 80001dc:	1d3b      	adds	r3, r7, #4
 80001de:	4618      	mov	r0, r3
 80001e0:	f000 f906 	bl	80003f0 <UartGets>
		for(int i=0; str[i] != '\0'; i++)
 80001e4:	2300      	movs	r3, #0
 80001e6:	617b      	str	r3, [r7, #20]
 80001e8:	e026      	b.n	8000238 <main+0x70>
		{

			if(((str[i]>64)&&(str[i]<91))||((str[i]>96)&&(str[i]<123)))
 80001ea:	1d3a      	adds	r2, r7, #4
 80001ec:	697b      	ldr	r3, [r7, #20]
 80001ee:	4413      	add	r3, r2
 80001f0:	781b      	ldrb	r3, [r3, #0]
 80001f2:	2b40      	cmp	r3, #64	@ 0x40
 80001f4:	d905      	bls.n	8000202 <main+0x3a>
 80001f6:	1d3a      	adds	r2, r7, #4
 80001f8:	697b      	ldr	r3, [r7, #20]
 80001fa:	4413      	add	r3, r2
 80001fc:	781b      	ldrb	r3, [r3, #0]
 80001fe:	2b5a      	cmp	r3, #90	@ 0x5a
 8000200:	d90b      	bls.n	800021a <main+0x52>
 8000202:	1d3a      	adds	r2, r7, #4
 8000204:	697b      	ldr	r3, [r7, #20]
 8000206:	4413      	add	r3, r2
 8000208:	781b      	ldrb	r3, [r3, #0]
 800020a:	2b60      	cmp	r3, #96	@ 0x60
 800020c:	d911      	bls.n	8000232 <main+0x6a>
 800020e:	1d3a      	adds	r2, r7, #4
 8000210:	697b      	ldr	r3, [r7, #20]
 8000212:	4413      	add	r3, r2
 8000214:	781b      	ldrb	r3, [r3, #0]
 8000216:	2b7a      	cmp	r3, #122	@ 0x7a
 8000218:	d80b      	bhi.n	8000232 <main+0x6a>
				str[i]^=32;
 800021a:	1d3a      	adds	r2, r7, #4
 800021c:	697b      	ldr	r3, [r7, #20]
 800021e:	4413      	add	r3, r2
 8000220:	781b      	ldrb	r3, [r3, #0]
 8000222:	f083 0320 	eor.w	r3, r3, #32
 8000226:	b2d9      	uxtb	r1, r3
 8000228:	1d3a      	adds	r2, r7, #4
 800022a:	697b      	ldr	r3, [r7, #20]
 800022c:	4413      	add	r3, r2
 800022e:	460a      	mov	r2, r1
 8000230:	701a      	strb	r2, [r3, #0]
		for(int i=0; str[i] != '\0'; i++)
 8000232:	697b      	ldr	r3, [r7, #20]
 8000234:	3301      	adds	r3, #1
 8000236:	617b      	str	r3, [r7, #20]
 8000238:	1d3a      	adds	r2, r7, #4
 800023a:	697b      	ldr	r3, [r7, #20]
 800023c:	4413      	add	r3, r2
 800023e:	781b      	ldrb	r3, [r3, #0]
 8000240:	2b00      	cmp	r3, #0
 8000242:	d1d2      	bne.n	80001ea <main+0x22>


		}
		UartPuts(str);
 8000244:	1d3b      	adds	r3, r7, #4
 8000246:	4618      	mov	r0, r3
 8000248:	f000 f8b6 	bl	80003b8 <UartPuts>
		UartGets(str);
 800024c:	e7c6      	b.n	80001dc <main+0x14>
 800024e:	bf00      	nop
 8000250:	080004f0 	.word	0x080004f0

08000254 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */

  DWT_Init();
 8000258:	f000 f802 	bl	8000260 <DWT_Init>
}
 800025c:	bf00      	nop
 800025e:	bd80      	pop	{r7, pc}

08000260 <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 8000260:	b480      	push	{r7}
 8000262:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000264:	4b14      	ldr	r3, [pc, #80]	@ (80002b8 <DWT_Init+0x58>)
 8000266:	68db      	ldr	r3, [r3, #12]
 8000268:	4a13      	ldr	r2, [pc, #76]	@ (80002b8 <DWT_Init+0x58>)
 800026a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800026e:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000270:	4b11      	ldr	r3, [pc, #68]	@ (80002b8 <DWT_Init+0x58>)
 8000272:	68db      	ldr	r3, [r3, #12]
 8000274:	4a10      	ldr	r2, [pc, #64]	@ (80002b8 <DWT_Init+0x58>)
 8000276:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800027a:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800027c:	4b0f      	ldr	r3, [pc, #60]	@ (80002bc <DWT_Init+0x5c>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	4a0e      	ldr	r2, [pc, #56]	@ (80002bc <DWT_Init+0x5c>)
 8000282:	f023 0301 	bic.w	r3, r3, #1
 8000286:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000288:	4b0c      	ldr	r3, [pc, #48]	@ (80002bc <DWT_Init+0x5c>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	4a0b      	ldr	r2, [pc, #44]	@ (80002bc <DWT_Init+0x5c>)
 800028e:	f043 0301 	orr.w	r3, r3, #1
 8000292:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8000294:	4b09      	ldr	r3, [pc, #36]	@ (80002bc <DWT_Init+0x5c>)
 8000296:	2200      	movs	r2, #0
 8000298:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 800029a:	bf00      	nop
    __ASM volatile ("NOP");
 800029c:	bf00      	nop
    __ASM volatile ("NOP");
 800029e:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 80002a0:	4b06      	ldr	r3, [pc, #24]	@ (80002bc <DWT_Init+0x5c>)
 80002a2:	685b      	ldr	r3, [r3, #4]
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	bf0c      	ite	eq
 80002a8:	2301      	moveq	r3, #1
 80002aa:	2300      	movne	r3, #0
 80002ac:	b2db      	uxtb	r3, r3
}
 80002ae:	4618      	mov	r0, r3
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bc80      	pop	{r7}
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	e000edf0 	.word	0xe000edf0
 80002bc:	e0001000 	.word	0xe0001000

080002c0 <UartInit>:
 *      Author: admin
 */

#include "uart.h"

void UartInit(uint32_t baud) {
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
	/* GPIO config */
	// enable gpio clock
	//RCC->AHB1ENR |= BV(RCC_AHB1ENR_GPIOAEN_Pos);
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80002c8:	4b24      	ldr	r3, [pc, #144]	@ (800035c <UartInit+0x9c>)
 80002ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002cc:	4a23      	ldr	r2, [pc, #140]	@ (800035c <UartInit+0x9c>)
 80002ce:	f043 0301 	orr.w	r3, r3, #1
 80002d2:	6313      	str	r3, [r2, #48]	@ 0x30
	// set gpio - no pull up & no pull down
	GPIOA->PUPDR &= ~(BV(2*2+1) | BV(2*2) | BV(2*3+1) | BV(2*3));
 80002d4:	4b22      	ldr	r3, [pc, #136]	@ (8000360 <UartInit+0xa0>)
 80002d6:	68db      	ldr	r3, [r3, #12]
 80002d8:	4a21      	ldr	r2, [pc, #132]	@ (8000360 <UartInit+0xa0>)
 80002da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80002de:	60d3      	str	r3, [r2, #12]
	// set gpio (PA2, PA3) mode as alt fn = 10
	GPIOA->MODER |= BV(2*2+1) | BV(2*3+1);
 80002e0:	4b1f      	ldr	r3, [pc, #124]	@ (8000360 <UartInit+0xa0>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	4a1e      	ldr	r2, [pc, #120]	@ (8000360 <UartInit+0xa0>)
 80002e6:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 80002ea:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(BV(2*2) | BV(2*3));
 80002ec:	4b1c      	ldr	r3, [pc, #112]	@ (8000360 <UartInit+0xa0>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	4a1b      	ldr	r2, [pc, #108]	@ (8000360 <UartInit+0xa0>)
 80002f2:	f023 0350 	bic.w	r3, r3, #80	@ 0x50
 80002f6:	6013      	str	r3, [r2, #0]
	// set gpio (PA2, PA3) pin alt fn as uart (AF7) -- AFRL = AFR[0], AFRH = AFR[1]
	GPIOA->AFR[0] = (7 << (2*4)) | (7 << (3*4));
 80002f8:	4b19      	ldr	r3, [pc, #100]	@ (8000360 <UartInit+0xa0>)
 80002fa:	f44f 42ee 	mov.w	r2, #30464	@ 0x7700
 80002fe:	621a      	str	r2, [r3, #32]
	/* UART config */
	// enable UART2 clock
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8000300:	4b16      	ldr	r3, [pc, #88]	@ (800035c <UartInit+0x9c>)
 8000302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000304:	4a15      	ldr	r2, [pc, #84]	@ (800035c <UartInit+0x9c>)
 8000306:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800030a:	6413      	str	r3, [r2, #64]	@ 0x40
	// UART2 config (8N1) = 8-bit data transfer=0, disable parity=0, tx en=1, rx en=1
	USART2->CR1 = USART_CR1_TE | USART_CR1_RE;
 800030c:	4b15      	ldr	r3, [pc, #84]	@ (8000364 <UartInit+0xa4>)
 800030e:	220c      	movs	r2, #12
 8000310:	60da      	str	r2, [r3, #12]
	// baud rate setting
	if(baud == 9600)
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	f5b3 5f16 	cmp.w	r3, #9600	@ 0x2580
 8000318:	d104      	bne.n	8000324 <UartInit+0x64>
		USART2->BRR = 0x0683;
 800031a:	4b12      	ldr	r3, [pc, #72]	@ (8000364 <UartInit+0xa4>)
 800031c:	f240 6283 	movw	r2, #1667	@ 0x683
 8000320:	609a      	str	r2, [r3, #8]
 8000322:	e00f      	b.n	8000344 <UartInit+0x84>
	else if(baud == 38400)
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	f5b3 4f16 	cmp.w	r3, #38400	@ 0x9600
 800032a:	d104      	bne.n	8000336 <UartInit+0x76>
		USART2->BRR = 0x01A1;
 800032c:	4b0d      	ldr	r3, [pc, #52]	@ (8000364 <UartInit+0xa4>)
 800032e:	f240 12a1 	movw	r2, #417	@ 0x1a1
 8000332:	609a      	str	r2, [r3, #8]
 8000334:	e006      	b.n	8000344 <UartInit+0x84>
	else if(baud == 115200)
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 800033c:	d102      	bne.n	8000344 <UartInit+0x84>
		USART2->BRR = 0x008B;
 800033e:	4b09      	ldr	r3, [pc, #36]	@ (8000364 <UartInit+0xa4>)
 8000340:	228b      	movs	r2, #139	@ 0x8b
 8000342:	609a      	str	r2, [r3, #8]
	// enable uart=1
	USART2->CR1 |= USART_CR1_UE;
 8000344:	4b07      	ldr	r3, [pc, #28]	@ (8000364 <UartInit+0xa4>)
 8000346:	68db      	ldr	r3, [r3, #12]
 8000348:	4a06      	ldr	r2, [pc, #24]	@ (8000364 <UartInit+0xa4>)
 800034a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800034e:	60d3      	str	r3, [r2, #12]
}
 8000350:	bf00      	nop
 8000352:	370c      	adds	r7, #12
 8000354:	46bd      	mov	sp, r7
 8000356:	bc80      	pop	{r7}
 8000358:	4770      	bx	lr
 800035a:	bf00      	nop
 800035c:	40023800 	.word	0x40023800
 8000360:	40020000 	.word	0x40020000
 8000364:	40004400 	.word	0x40004400

08000368 <UartPutch>:

void UartPutch(int ch) {
 8000368:	b480      	push	{r7}
 800036a:	b083      	sub	sp, #12
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
	// write char in TDR
	USART2->DR = ch;
 8000370:	4a07      	ldr	r2, [pc, #28]	@ (8000390 <UartPutch+0x28>)
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	6053      	str	r3, [r2, #4]
	// wait until Tx is done (until Tx regr is not empty)
	while((USART2->SR & USART_SR_TXE) == 0)
 8000376:	bf00      	nop
 8000378:	4b05      	ldr	r3, [pc, #20]	@ (8000390 <UartPutch+0x28>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000380:	2b00      	cmp	r3, #0
 8000382:	d0f9      	beq.n	8000378 <UartPutch+0x10>
		;
}
 8000384:	bf00      	nop
 8000386:	bf00      	nop
 8000388:	370c      	adds	r7, #12
 800038a:	46bd      	mov	sp, r7
 800038c:	bc80      	pop	{r7}
 800038e:	4770      	bx	lr
 8000390:	40004400 	.word	0x40004400

08000394 <UartGetch>:

int UartGetch(void) {
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0
	// wait until data is Rx is done (until Rx regr is empty)
	while((USART2->SR & USART_SR_RXNE) == 0)
 8000398:	bf00      	nop
 800039a:	4b06      	ldr	r3, [pc, #24]	@ (80003b4 <UartGetch+0x20>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	f003 0320 	and.w	r3, r3, #32
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d0f9      	beq.n	800039a <UartGetch+0x6>
		;
	// read char from RDR
	return USART2->DR;
 80003a6:	4b03      	ldr	r3, [pc, #12]	@ (80003b4 <UartGetch+0x20>)
 80003a8:	685b      	ldr	r3, [r3, #4]
}
 80003aa:	4618      	mov	r0, r3
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bc80      	pop	{r7}
 80003b0:	4770      	bx	lr
 80003b2:	bf00      	nop
 80003b4:	40004400 	.word	0x40004400

080003b8 <UartPuts>:

void UartPuts(char *str) {
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b084      	sub	sp, #16
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
	for(int i=0; str[i] != '\0'; i++)
 80003c0:	2300      	movs	r3, #0
 80003c2:	60fb      	str	r3, [r7, #12]
 80003c4:	e009      	b.n	80003da <UartPuts+0x22>
		UartPutch(str[i]);
 80003c6:	68fb      	ldr	r3, [r7, #12]
 80003c8:	687a      	ldr	r2, [r7, #4]
 80003ca:	4413      	add	r3, r2
 80003cc:	781b      	ldrb	r3, [r3, #0]
 80003ce:	4618      	mov	r0, r3
 80003d0:	f7ff ffca 	bl	8000368 <UartPutch>
	for(int i=0; str[i] != '\0'; i++)
 80003d4:	68fb      	ldr	r3, [r7, #12]
 80003d6:	3301      	adds	r3, #1
 80003d8:	60fb      	str	r3, [r7, #12]
 80003da:	68fb      	ldr	r3, [r7, #12]
 80003dc:	687a      	ldr	r2, [r7, #4]
 80003de:	4413      	add	r3, r2
 80003e0:	781b      	ldrb	r3, [r3, #0]
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d1ef      	bne.n	80003c6 <UartPuts+0xe>
}
 80003e6:	bf00      	nop
 80003e8:	bf00      	nop
 80003ea:	3710      	adds	r7, #16
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bd80      	pop	{r7, pc}

080003f0 <UartGets>:

void UartGets(char *str) {
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b084      	sub	sp, #16
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
	int i=0;
 80003f8:	2300      	movs	r3, #0
 80003fa:	60fb      	str	r3, [r7, #12]
	char ch;
	do {
		ch = UartGetch();
 80003fc:	f7ff ffca 	bl	8000394 <UartGetch>
 8000400:	4603      	mov	r3, r0
 8000402:	72fb      	strb	r3, [r7, #11]
		str[i] = ch;
 8000404:	68fb      	ldr	r3, [r7, #12]
 8000406:	687a      	ldr	r2, [r7, #4]
 8000408:	4413      	add	r3, r2
 800040a:	7afa      	ldrb	r2, [r7, #11]
 800040c:	701a      	strb	r2, [r3, #0]
		i++;
 800040e:	68fb      	ldr	r3, [r7, #12]
 8000410:	3301      	adds	r3, #1
 8000412:	60fb      	str	r3, [r7, #12]
	} while(ch != '\r');
 8000414:	7afb      	ldrb	r3, [r7, #11]
 8000416:	2b0d      	cmp	r3, #13
 8000418:	d1f0      	bne.n	80003fc <UartGets+0xc>
	str[i] = '\n';
 800041a:	68fb      	ldr	r3, [r7, #12]
 800041c:	687a      	ldr	r2, [r7, #4]
 800041e:	4413      	add	r3, r2
 8000420:	220a      	movs	r2, #10
 8000422:	701a      	strb	r2, [r3, #0]
	i++;
 8000424:	68fb      	ldr	r3, [r7, #12]
 8000426:	3301      	adds	r3, #1
 8000428:	60fb      	str	r3, [r7, #12]
	str[i] = '\0';
 800042a:	68fb      	ldr	r3, [r7, #12]
 800042c:	687a      	ldr	r2, [r7, #4]
 800042e:	4413      	add	r3, r2
 8000430:	2200      	movs	r2, #0
 8000432:	701a      	strb	r2, [r3, #0]
}
 8000434:	bf00      	nop
 8000436:	3710      	adds	r7, #16
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}

0800043c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800043c:	480d      	ldr	r0, [pc, #52]	@ (8000474 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800043e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000440:	f7ff ff08 	bl	8000254 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000444:	480c      	ldr	r0, [pc, #48]	@ (8000478 <LoopForever+0x6>)
  ldr r1, =_edata
 8000446:	490d      	ldr	r1, [pc, #52]	@ (800047c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000448:	4a0d      	ldr	r2, [pc, #52]	@ (8000480 <LoopForever+0xe>)
  movs r3, #0
 800044a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800044c:	e002      	b.n	8000454 <LoopCopyDataInit>

0800044e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800044e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000450:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000452:	3304      	adds	r3, #4

08000454 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000454:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000456:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000458:	d3f9      	bcc.n	800044e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800045a:	4a0a      	ldr	r2, [pc, #40]	@ (8000484 <LoopForever+0x12>)
  ldr r4, =_ebss
 800045c:	4c0a      	ldr	r4, [pc, #40]	@ (8000488 <LoopForever+0x16>)
  movs r3, #0
 800045e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000460:	e001      	b.n	8000466 <LoopFillZerobss>

08000462 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000462:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000464:	3204      	adds	r2, #4

08000466 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000466:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000468:	d3fb      	bcc.n	8000462 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800046a:	f000 f811 	bl	8000490 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 800046e:	f7ff feab 	bl	80001c8 <main>

08000472 <LoopForever>:

LoopForever:
  b LoopForever
 8000472:	e7fe      	b.n	8000472 <LoopForever>
  ldr   r0, =_estack
 8000474:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000478:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800047c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000480:	08000508 	.word	0x08000508
  ldr r2, =_sbss
 8000484:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000488:	2000001c 	.word	0x2000001c

0800048c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800048c:	e7fe      	b.n	800048c <ADC_IRQHandler>
	...

08000490 <__libc_init_array>:
 8000490:	b570      	push	{r4, r5, r6, lr}
 8000492:	4d0d      	ldr	r5, [pc, #52]	@ (80004c8 <__libc_init_array+0x38>)
 8000494:	4c0d      	ldr	r4, [pc, #52]	@ (80004cc <__libc_init_array+0x3c>)
 8000496:	1b64      	subs	r4, r4, r5
 8000498:	10a4      	asrs	r4, r4, #2
 800049a:	2600      	movs	r6, #0
 800049c:	42a6      	cmp	r6, r4
 800049e:	d109      	bne.n	80004b4 <__libc_init_array+0x24>
 80004a0:	4d0b      	ldr	r5, [pc, #44]	@ (80004d0 <__libc_init_array+0x40>)
 80004a2:	4c0c      	ldr	r4, [pc, #48]	@ (80004d4 <__libc_init_array+0x44>)
 80004a4:	f000 f818 	bl	80004d8 <_init>
 80004a8:	1b64      	subs	r4, r4, r5
 80004aa:	10a4      	asrs	r4, r4, #2
 80004ac:	2600      	movs	r6, #0
 80004ae:	42a6      	cmp	r6, r4
 80004b0:	d105      	bne.n	80004be <__libc_init_array+0x2e>
 80004b2:	bd70      	pop	{r4, r5, r6, pc}
 80004b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80004b8:	4798      	blx	r3
 80004ba:	3601      	adds	r6, #1
 80004bc:	e7ee      	b.n	800049c <__libc_init_array+0xc>
 80004be:	f855 3b04 	ldr.w	r3, [r5], #4
 80004c2:	4798      	blx	r3
 80004c4:	3601      	adds	r6, #1
 80004c6:	e7f2      	b.n	80004ae <__libc_init_array+0x1e>
 80004c8:	08000500 	.word	0x08000500
 80004cc:	08000500 	.word	0x08000500
 80004d0:	08000500 	.word	0x08000500
 80004d4:	08000504 	.word	0x08000504

080004d8 <_init>:
 80004d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004da:	bf00      	nop
 80004dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004de:	bc08      	pop	{r3}
 80004e0:	469e      	mov	lr, r3
 80004e2:	4770      	bx	lr

080004e4 <_fini>:
 80004e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004e6:	bf00      	nop
 80004e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004ea:	bc08      	pop	{r3}
 80004ec:	469e      	mov	lr, r3
 80004ee:	4770      	bx	lr
